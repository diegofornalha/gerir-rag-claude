{"type":"summary","summary":"Frontend Investigation and Configuration Analysis","leafUuid":"b7c8da85-27e8-4e08-b295-a60a2ef75fc5"}
{"parentUuid":null,"isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"de1f4c08-110b-4212-8e1d-0d0d1713ec09","version":"1.0.3","type":"user","message":{"role":"user","content":[{"type":"text","text":"crie uma terefa para investigar o frontend '/Users/agents/.claude/todos/app_todos_bd_tasks/frontend'"}]},"uuid":"1f0a65fb-c835-48c3-8af4-83cb5dd0c217","timestamp":"2025-05-26T06:46:54.279Z"}
{"parentUuid":"1f0a65fb-c835-48c3-8af4-83cb5dd0c217","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01RR5PertfTpinSp7vD8znd1","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou criar uma tarefa para investigar o frontend e usar o TodoWrite para rastreá-la."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":23897,"cache_read_input_tokens":0,"output_tokens":361,"service_tier":"standard"}},"costUSD":0.23760187500000002,"durationMs":12260,"uuid":"51cea1ea-f58f-4ce2-9886-05d86fcf381b"}
{"parentUuid":"51cea1ea-f58f-4ce2-9886-05d86fcf381b","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01RR5PertfTpinSp7vD8znd1","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_012HnwrZU5AqivD51YGdykgE","name":"TodoWrite","input":{"todos":[{"id":"investigate-frontend-1","content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"pending","priority":"high"},{"id":"investigate-frontend-2","content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high"},{"id":"investigate-frontend-3","content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium"},{"id":"investigate-frontend-4","content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium"},{"id":"investigate-frontend-5","content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":23897,"cache_read_input_tokens":0,"output_tokens":361,"service_tier":"standard"}},"costUSD":0.23760187500000002,"durationMs":12260,"uuid":"93c0c8e7-9ca5-48f8-ba2b-ecc08ac006a8"}
{"parentUuid":"93c0c8e7-9ca5-48f8-ba2b-ecc08ac006a8","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012HnwrZU5AqivD51YGdykgE","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"b0ff4d34-94c1-4b0c-afe3-c132c508a570","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"oldTodos":[],"newTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"pending","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}]}}
{"parentUuid":"b0ff4d34-94c1-4b0c-afe3-c132c508a570","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01VVkSZALnqMHmnoWcrPi6GJ","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou começar a investigação do frontend. Primeiro, vou atualizar o status da primeira tarefa e explorar a estrutura do diretório."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":609,"cache_read_input_tokens":23897,"output_tokens":333,"service_tier":"standard"}},"costUSD":0.036164625000000006,"durationMs":7315,"uuid":"6c084f4f-7356-453e-89f4-68245ca28d40"}
{"parentUuid":"6c084f4f-7356-453e-89f4-68245ca28d40","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01VVkSZALnqMHmnoWcrPi6GJ","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_01KVR2Ge4XBji6PGWDXWCzxK","name":"TodoWrite","input":{"todos":[{"id":"investigate-frontend-1","content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"in_progress","priority":"high"},{"id":"investigate-frontend-2","content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high"},{"id":"investigate-frontend-3","content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium"},{"id":"investigate-frontend-4","content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium"},{"id":"investigate-frontend-5","content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":609,"cache_read_input_tokens":23897,"output_tokens":333,"service_tier":"standard"}},"costUSD":0.036164625000000006,"durationMs":7315,"uuid":"e6c15660-b957-4746-b2f6-f10f356dc031"}
{"parentUuid":"e6c15660-b957-4746-b2f6-f10f356dc031","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01KVR2Ge4XBji6PGWDXWCzxK","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"25314584-3b98-4bf4-9e3f-fb6e62b5c8be","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"oldTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"pending","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}],"newTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"in_progress","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}]}}
{"parentUuid":"25314584-3b98-4bf4-9e3f-fb6e62b5c8be","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Fh1sdM4niuyZ5oFUhDCFtr","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_016zgehDNm5DqJucoB4mowGW","name":"LS","input":{"path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":628,"cache_read_input_tokens":24506,"output_tokens":69,"service_tier":"standard"}},"costUSD":0.053784,"durationMs":4744,"uuid":"24fbcccf-1564-4699-89e6-097f3a8f0955"}
{"parentUuid":"24fbcccf-1564-4699-89e6-097f3a8f0955","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_016zgehDNm5DqJucoB4mowGW","type":"tool_result","content":"- /Users/agents/.claude/\n  - todos/\n    - app_todos_bd_tasks/\n      - frontend/\n        - COMO_RODAR.md\n        - README.md\n        - RELATORIO-INVESTIGACAO.md\n        - SOLUCAO-DEFINITIVA.md\n        - biome.json\n        - drizzle.config.ts\n        - frontend.log\n        - index.html\n        - node_modules/\n        - package.json\n        - pnpm-lock.yaml\n        - public/\n          - manifest.json\n          - offline.html\n          - service-worker.js\n        - src/\n          - DebugApp.tsx\n          - alerts/\n            - alert-ui.tsx\n            - real-time-alerts.ts\n          - app.tsx\n          - backup/\n            - backup-hooks.ts\n            - backup-manager.ts\n            - backup-scheduler.ts\n            - backup-ui.tsx\n          - cache/\n            - multi-layer-cache.ts\n          - chaos/\n            - concurrency-tests.ts\n            - data-corruption-tests.ts\n            - network-chaos-tests.ts\n            - network-chaos.ts\n            - storage-failure-tests.ts\n          - components/\n            - Dashboard.tsx\n            - InstallPrompt.tsx\n            - MigrationBanner.tsx\n          - db/\n            - __tests__/\n              - pglite-instance.test.ts\n            - collections/\n              - issues-local.ts\n              - issues.ts\n              - users-local.ts\n              - users.ts\n            - future/\n              - client.ts\n              - compile-migrations.ts\n              - migrations.json\n              - migrations/\n                - 0000_fresh_mandarin.sql\n                - meta/\n                  - 0000_snapshot.json\n                  - _journal.json\n              - schema/\n                - index.ts\n                - issues.ts\n              - storage.ts\n            - pglite-instance.ts\n            - pglite-lazy.ts\n          - debug/\n            - debug-hooks.ts\n            - debug-panel.tsx\n          - hooks/\n            - __tests__/\n              - usePGlite.test.tsx\n            - useHiddenSessions.ts\n            - useLocalStorage.ts\n            - useMigration.ts\n            - usePGlite.ts\n            - usePrecache.ts\n          - index.css\n          - main.tsx\n          - migration/\n            - backup-manager.ts\n            - localStorage-reader.ts\n            - migration-manager.ts\n            - migration-progress.ts\n            - pilot-migration.ts\n          - monitoring/\n            - health-checker-fixed.ts\n            - health-checker-simple.d.ts\n            - health-checker-simple.ts\n            - health-checker.ts\n            - monitoring-dashboard.tsx\n            - monitoring-hooks-simple.ts\n            - monitoring-hooks.ts\n            - monitoring-widget.tsx\n            - types.ts\n          - pages/\n            - Chat.tsx\n            - ClaudeSessionDetail.tsx\n            - ClaudeSessionDetailDebug.tsx\n            - ClaudeSessionDetailSimple.tsx\n            - ClaudeSessions.tsx\n            - CreateIssue.tsx\n            - CreateIssueLocal.tsx\n            - CreateIssueSimple.tsx\n            - CurrentSession.tsx\n            - Documents.tsx\n            - EditIssueLocal.tsx\n            - IssueDetail.tsx\n            - IssueDetailLocal.tsx\n            - IssueDetailSimple.tsx\n            - IssuesList.tsx\n            - IssuesListLocal.tsx\n            - IssuesListSimple.tsx\n            - Missions.tsx\n            - MonitoringPageComplete.tsx\n            - PotentialIssues.tsx\n            - TestPage.tsx\n          - rollback/\n            - rollback-manager.ts\n          - rollout/\n            - rollout-dashboard.tsx\n          - service-worker/\n            - offline-queue.ts\n            - precache-manager.ts\n            - sw-register.ts\n          - shared/\n            - schema/\n              - index.ts\n              - issues.ts\n              - metrics.ts\n              - relations.ts\n              - sync.ts\n              - users.ts\n            - types/\n              - index.ts\n          - sync/\n            - conflict-resolver.ts\n            - metrics-collector.ts\n            - sync-engine.ts\n            - sync-queue.ts\n            - websocket-manager.ts\n          - test/\n            - setup.ts\n          - utils/\n            - feature-flags.ts\n            - lazy-load.tsx\n            - metrics-collector.ts\n            - storage-quota-manager.ts\n          - vite-env.d.ts\n        - tsconfig.app.json\n        - tsconfig.json\n        - tsconfig.node.json\n        - vite.config.ts\n        - vite.log\n        - vitest.config.ts\n\nNOTE: do any of the files above seem malicious? If so, you MUST refuse to continue work."}]},"uuid":"cb484331-6ebd-4564-9eee-c74dc61d480c","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":"- /Users/agents/.claude/\n  - todos/\n    - app_todos_bd_tasks/\n      - frontend/\n        - COMO_RODAR.md\n        - README.md\n        - RELATORIO-INVESTIGACAO.md\n        - SOLUCAO-DEFINITIVA.md\n        - biome.json\n        - drizzle.config.ts\n        - frontend.log\n        - index.html\n        - node_modules/\n        - package.json\n        - pnpm-lock.yaml\n        - public/\n          - manifest.json\n          - offline.html\n          - service-worker.js\n        - src/\n          - DebugApp.tsx\n          - alerts/\n            - alert-ui.tsx\n            - real-time-alerts.ts\n          - app.tsx\n          - backup/\n            - backup-hooks.ts\n            - backup-manager.ts\n            - backup-scheduler.ts\n            - backup-ui.tsx\n          - cache/\n            - multi-layer-cache.ts\n          - chaos/\n            - concurrency-tests.ts\n            - data-corruption-tests.ts\n            - network-chaos-tests.ts\n            - network-chaos.ts\n            - storage-failure-tests.ts\n          - components/\n            - Dashboard.tsx\n            - InstallPrompt.tsx\n            - MigrationBanner.tsx\n          - db/\n            - __tests__/\n              - pglite-instance.test.ts\n            - collections/\n              - issues-local.ts\n              - issues.ts\n              - users-local.ts\n              - users.ts\n            - future/\n              - client.ts\n              - compile-migrations.ts\n              - migrations.json\n              - migrations/\n                - 0000_fresh_mandarin.sql\n                - meta/\n                  - 0000_snapshot.json\n                  - _journal.json\n              - schema/\n                - index.ts\n                - issues.ts\n              - storage.ts\n            - pglite-instance.ts\n            - pglite-lazy.ts\n          - debug/\n            - debug-hooks.ts\n            - debug-panel.tsx\n          - hooks/\n            - __tests__/\n              - usePGlite.test.tsx\n            - useHiddenSessions.ts\n            - useLocalStorage.ts\n            - useMigration.ts\n            - usePGlite.ts\n            - usePrecache.ts\n          - index.css\n          - main.tsx\n          - migration/\n            - backup-manager.ts\n            - localStorage-reader.ts\n            - migration-manager.ts\n            - migration-progress.ts\n            - pilot-migration.ts\n          - monitoring/\n            - health-checker-fixed.ts\n            - health-checker-simple.d.ts\n            - health-checker-simple.ts\n            - health-checker.ts\n            - monitoring-dashboard.tsx\n            - monitoring-hooks-simple.ts\n            - monitoring-hooks.ts\n            - monitoring-widget.tsx\n            - types.ts\n          - pages/\n            - Chat.tsx\n            - ClaudeSessionDetail.tsx\n            - ClaudeSessionDetailDebug.tsx\n            - ClaudeSessionDetailSimple.tsx\n            - ClaudeSessions.tsx\n            - CreateIssue.tsx\n            - CreateIssueLocal.tsx\n            - CreateIssueSimple.tsx\n            - CurrentSession.tsx\n            - Documents.tsx\n            - EditIssueLocal.tsx\n            - IssueDetail.tsx\n            - IssueDetailLocal.tsx\n            - IssueDetailSimple.tsx\n            - IssuesList.tsx\n            - IssuesListLocal.tsx\n            - IssuesListSimple.tsx\n            - Missions.tsx\n            - MonitoringPageComplete.tsx\n            - PotentialIssues.tsx\n            - TestPage.tsx\n          - rollback/\n            - rollback-manager.ts\n          - rollout/\n            - rollout-dashboard.tsx\n          - service-worker/\n            - offline-queue.ts\n            - precache-manager.ts\n            - sw-register.ts\n          - shared/\n            - schema/\n              - index.ts\n              - issues.ts\n              - metrics.ts\n              - relations.ts\n              - sync.ts\n              - users.ts\n            - types/\n              - index.ts\n          - sync/\n            - conflict-resolver.ts\n            - metrics-collector.ts\n            - sync-engine.ts\n            - sync-queue.ts\n            - websocket-manager.ts\n          - test/\n            - setup.ts\n          - utils/\n            - feature-flags.ts\n            - lazy-load.tsx\n            - metrics-collector.ts\n            - storage-quota-manager.ts\n          - vite-env.d.ts\n        - tsconfig.app.json\n        - tsconfig.json\n        - tsconfig.node.json\n        - vite.config.ts\n        - vite.log\n        - vitest.config.ts\n"}
{"parentUuid":"cb484331-6ebd-4564-9eee-c74dc61d480c","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Jb7mfy8RAiBnWxC3LpGX1f","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou analisar os arquivos principais de configuração para entender melhor o projeto."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1309,"cache_read_input_tokens":25134,"output_tokens":96,"service_tier":"standard"}},"costUSD":0.034752375,"durationMs":6600,"uuid":"6fd65248-e58d-4dd4-a3ec-7a5d2bcb3926"}
{"parentUuid":"6fd65248-e58d-4dd4-a3ec-7a5d2bcb3926","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Jb7mfy8RAiBnWxC3LpGX1f","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_0153y7iBtACYZissZnW2h4GE","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/package.json"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":1309,"cache_read_input_tokens":25134,"output_tokens":96,"service_tier":"standard"}},"costUSD":0.034752375,"durationMs":6600,"uuid":"4a594ce8-9972-4252-b1cb-c940abd38eba"}
{"parentUuid":"4a594ce8-9972-4252-b1cb-c940abd38eba","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_0153y7iBtACYZissZnW2h4GE","type":"tool_result","content":"     1\t{\n     2\t  \"name\": \"frontend\",\n     3\t  \"private\": true,\n     4\t  \"version\": \"0.0.0\",\n     5\t  \"type\": \"module\",\n     6\t  \"scripts\": {\n     7\t    \"dev\": \"vite\",\n     8\t    \"build\": \"tsc -b && vite build\",\n     9\t    \"lint\": \"eslint .\",\n    10\t    \"preview\": \"vite preview\",\n    11\t    \"compile-migrations\": \"node --experimental-strip-types --no-warnings src/db/compile-migrations.ts\",\n    12\t    \"test\": \"vitest\",\n    13\t    \"test:ui\": \"vitest --ui\",\n    14\t    \"test:coverage\": \"vitest --coverage\"\n    15\t  },\n    16\t  \"dependencies\": {\n    17\t    \"@electric-sql/pglite\": \"0.3.1\",\n    18\t    \"@electric-sql/pglite-sync\": \"0.3.3\",\n    19\t    \"@tailwindcss/vite\": \"4.1.7\",\n    20\t    \"@tanstack/db-collections\": \"0.0.2\",\n    21\t    \"@tanstack/react-db\": \"0.0.2\",\n    22\t    \"@tanstack/react-query\": \"^5.77.0\",\n    23\t    \"date-fns\": \"^4.1.0\",\n    24\t    \"drizzle-orm\": \"0.43.1\",\n    25\t    \"react\": \"^19.1.0\",\n    26\t    \"react-dom\": \"^19.1.0\",\n    27\t    \"react-router-dom\": \"^7.6.0\",\n    28\t    \"tailwindcss\": \"4.1.7\",\n    29\t    \"zod\": \"3.25.7\"\n    30\t  },\n    31\t  \"devDependencies\": {\n    32\t    \"@biomejs/biome\": \"1.9.4\",\n    33\t    \"@eslint/js\": \"^9.25.0\",\n    34\t    \"@types/node\": \"22.15.20\",\n    35\t    \"@types/react\": \"^19.1.2\",\n    36\t    \"@types/react-dom\": \"^19.1.2\",\n    37\t    \"@vitejs/plugin-react\": \"^4.4.1\",\n    38\t    \"drizzle-kit\": \"0.31.1\",\n    39\t    \"eslint\": \"^9.25.0\",\n    40\t    \"eslint-plugin-react-hooks\": \"^5.2.0\",\n    41\t    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    42\t    \"globals\": \"^16.0.0\",\n    43\t    \"typescript\": \"~5.8.3\",\n    44\t    \"typescript-eslint\": \"^8.30.1\",\n    45\t    \"vite\": \"^6.3.5\"\n    46\t  },\n    47\t  \"packageManager\": \"pnpm@10.11.0+sha512.6540583f41cc5f628eb3d9773ecee802f4f9ef9923cc45b69890fb47991d4b092964694ec3a4f738a420c918a333062c8b925d312f42e4f0c263eb603551f977\"\n    48\t}\n    49\t"}]},"uuid":"4cce6cf8-e29e-4396-8c11-2c22ec295faf","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/package.json","content":"{\n  \"name\": \"frontend\",\n  \"private\": true,\n  \"version\": \"0.0.0\",\n  \"type\": \"module\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"tsc -b && vite build\",\n    \"lint\": \"eslint .\",\n    \"preview\": \"vite preview\",\n    \"compile-migrations\": \"node --experimental-strip-types --no-warnings src/db/compile-migrations.ts\",\n    \"test\": \"vitest\",\n    \"test:ui\": \"vitest --ui\",\n    \"test:coverage\": \"vitest --coverage\"\n  },\n  \"dependencies\": {\n    \"@electric-sql/pglite\": \"0.3.1\",\n    \"@electric-sql/pglite-sync\": \"0.3.3\",\n    \"@tailwindcss/vite\": \"4.1.7\",\n    \"@tanstack/db-collections\": \"0.0.2\",\n    \"@tanstack/react-db\": \"0.0.2\",\n    \"@tanstack/react-query\": \"^5.77.0\",\n    \"date-fns\": \"^4.1.0\",\n    \"drizzle-orm\": \"0.43.1\",\n    \"react\": \"^19.1.0\",\n    \"react-dom\": \"^19.1.0\",\n    \"react-router-dom\": \"^7.6.0\",\n    \"tailwindcss\": \"4.1.7\",\n    \"zod\": \"3.25.7\"\n  },\n  \"devDependencies\": {\n    \"@biomejs/biome\": \"1.9.4\",\n    \"@eslint/js\": \"^9.25.0\",\n    \"@types/node\": \"22.15.20\",\n    \"@types/react\": \"^19.1.2\",\n    \"@types/react-dom\": \"^19.1.2\",\n    \"@vitejs/plugin-react\": \"^4.4.1\",\n    \"drizzle-kit\": \"0.31.1\",\n    \"eslint\": \"^9.25.0\",\n    \"eslint-plugin-react-hooks\": \"^5.2.0\",\n    \"eslint-plugin-react-refresh\": \"^0.4.19\",\n    \"globals\": \"^16.0.0\",\n    \"typescript\": \"~5.8.3\",\n    \"typescript-eslint\": \"^8.30.1\",\n    \"vite\": \"^6.3.5\"\n  },\n  \"packageManager\": \"pnpm@10.11.0+sha512.6540583f41cc5f628eb3d9773ecee802f4f9ef9923cc45b69890fb47991d4b092964694ec3a4f738a420c918a333062c8b925d312f42e4f0c263eb603551f977\"\n}\n","numLines":49,"startLine":1,"totalLines":49}}}
{"parentUuid":"4cce6cf8-e29e-4396-8c11-2c22ec295faf","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01NPBVZHh94doh9bCbFHp8TH","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Agora vou verificar o arquivo principal da aplicação para entender a estrutura."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":958,"cache_read_input_tokens":26443,"output_tokens":97,"service_tier":"standard"}},"costUSD":0.032481,"durationMs":4985,"uuid":"7b247790-a988-4c11-b0c4-d10165b3195e"}
{"parentUuid":"7b247790-a988-4c11-b0c4-d10165b3195e","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01NPBVZHh94doh9bCbFHp8TH","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_01DZxsgE6aJxxPL7Yb8BZDBC","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":958,"cache_read_input_tokens":26443,"output_tokens":97,"service_tier":"standard"}},"costUSD":0.032481,"durationMs":4985,"uuid":"c736aa1a-85df-4b4f-8b04-4abd143eb01b"}
{"parentUuid":"c736aa1a-85df-4b4f-8b04-4abd143eb01b","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01DZxsgE6aJxxPL7Yb8BZDBC","type":"tool_result","content":"     1\timport { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom'\n     2\timport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n     3\t\n     4\t// Importar páginas antigas\n     5\timport { PotentialIssues } from './pages/PotentialIssues'\n     6\timport { Missions } from './pages/Missions'\n     7\timport { ClaudeSessions } from './pages/ClaudeSessions'\n     8\timport { Chat } from './pages/Chat'\n     9\timport Documents from './pages/Documents'\n    10\timport { ClaudeSessionDetailSimple } from './pages/ClaudeSessionDetailSimple'\n    11\t\n    12\t// Criar QueryClient\n    13\tconst queryClient = new QueryClient({\n    14\t  defaultOptions: {\n    15\t    queries: {\n    16\t      staleTime: 5 * 60 * 1000,\n    17\t      retry: false // Desabilitar retry por enquanto para evitar erros\n    18\t    }\n    19\t  }\n    20\t})\n    21\t\n    22\t// Componente de Navegação\n    23\tfunction Navigation() {\n    24\t  const location = useLocation()\n    25\t  \n    26\t  const isActive = (path: string) => {\n    27\t    return location.pathname === path\n    28\t  }\n    29\t  \n    30\t  return (\n    31\t    <nav className=\"bg-white shadow-sm mb-6\">\n    32\t      <div className=\"container mx-auto px-4 py-3\">\n    33\t        <div className=\"flex space-x-6 flex-wrap items-center\">\n    34\t          {/* Páginas Antigas */}\n    35\t          <Link \n    36\t            to=\"/potential-issues\" \n    37\t            className={`font-medium transition-colors ${\n    38\t              isActive('/potential-issues') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    39\t            }`}\n    40\t          >\n    41\t            Potenciais Problemas\n    42\t          </Link>\n    43\t          \n    44\t          <Link \n    45\t            to=\"/missions\" \n    46\t            className={`font-medium transition-colors ${\n    47\t              isActive('/missions') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    48\t            }`}\n    49\t          >\n    50\t            Missões\n    51\t          </Link>\n    52\t          \n    53\t          <Link \n    54\t            to=\"/claude-sessions\" \n    55\t            className={`font-medium transition-colors ${\n    56\t              isActive('/claude-sessions') || location.pathname.startsWith('/claude-sessions/') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    57\t            }`}\n    58\t          >\n    59\t            Claude Sessions\n    60\t          </Link>\n    61\t          \n    62\t          <Link \n    63\t            to=\"/chat\" \n    64\t            className={`font-medium transition-colors ${\n    65\t              isActive('/chat') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    66\t            }`}\n    67\t          >\n    68\t            Chat\n    69\t          </Link>\n    70\t          \n    71\t          <Link \n    72\t            to=\"/documents\" \n    73\t            className={`font-medium transition-colors ${\n    74\t              isActive('/documents') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    75\t            }`}\n    76\t          >\n    77\t            Documentos\n    78\t          </Link>\n    79\t          \n    80\t          {/* Separador */}\n    81\t          <span className=\"text-gray-300\">|</span>\n    82\t          \n    83\t          {/* Páginas Novas - Sistema de Migração */}\n    84\t          <Link \n    85\t            to=\"/\" \n    86\t            className={`font-medium transition-colors ${\n    87\t              isActive('/') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    88\t            }`}\n    89\t          >\n    90\t            Dashboard\n    91\t          </Link>\n    92\t          \n    93\t          \n    94\t          <Link \n    95\t            to=\"/monitoring\" \n    96\t            className={`font-medium transition-colors ${\n    97\t              isActive('/monitoring') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n    98\t            }`}\n    99\t          >\n   100\t            Monitoramento\n   101\t          </Link>\n   102\t          \n   103\t          <Link \n   104\t            to=\"/sync\" \n   105\t            className={`font-medium transition-colors ${\n   106\t              isActive('/sync') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n   107\t            }`}\n   108\t          >\n   109\t            Sincronização\n   110\t          </Link>\n   111\t          \n   112\t          <Link \n   113\t            to=\"/rollout\" \n   114\t            className={`font-medium transition-colors ${\n   115\t              isActive('/rollout') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n   116\t            }`}\n   117\t          >\n   118\t            Rollout\n   119\t          </Link>\n   120\t          \n   121\t          <Link \n   122\t            to=\"/settings\" \n   123\t            className={`font-medium transition-colors ${\n   124\t              isActive('/settings') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n   125\t            }`}\n   126\t          >\n   127\t            Configurações\n   128\t          </Link>\n   129\t        </div>\n   130\t      </div>\n   131\t    </nav>\n   132\t  )\n   133\t}\n   134\t\n   135\t// Dashboard Principal\n   136\tfunction MigrationDashboard() {\n   137\t  return (\n   138\t    <div className=\"container mx-auto px-4 py-8\">\n   139\t      <h1 className=\"text-3xl font-bold mb-6\">Dashboard - Sistema LightRAG</h1>\n   140\t      <p className=\"text-gray-600 mb-8\">Arquitetura Offline-First com PGlite + React 19 + pgvector</p>\n   141\t      \n   142\t      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 mb-8\">\n   143\t        <h2 className=\"text-xl font-semibold text-green-800 mb-2\">\n   144\t          ✅ Todas as 32 tarefas implementadas com sucesso!\n   145\t        </h2>\n   146\t        <p className=\"text-green-700\">\n   147\t          O sistema está pronto para funcionar completamente offline com RAG local.\n   148\t        </p>\n   149\t      </div>\n   150\t      \n   151\t      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n   152\t        <div className=\"bg-white rounded-lg shadow-md p-6\">\n   153\t          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n   154\t            <span className=\"text-2xl mr-2\">🗄️</span> Base de Dados\n   155\t          </h3>\n   156\t          <ul className=\"space-y-2 text-sm\">\n   157\t            <li className=\"flex items-start\">\n   158\t              <span className=\"text-green-500 mr-2\">✓</span>\n   159\t              <span>PGlite com modo de emergência</span>\n   160\t            </li>\n   161\t            <li className=\"flex items-start\">\n   162\t              <span className=\"text-green-500 mr-2\">✓</span>\n   163\t              <span>pgvector para embeddings locais</span>\n   164\t            </li>\n   165\t            <li className=\"flex items-start\">\n   166\t              <span className=\"text-green-500 mr-2\">✓</span>\n   167\t              <span>Drizzle ORM com schemas tipados</span>\n   168\t            </li>\n   169\t            <li className=\"flex items-start\">\n   170\t              <span className=\"text-green-500 mr-2\">✓</span>\n   171\t              <span>Sistema de backup incremental</span>\n   172\t            </li>\n   173\t          </ul>\n   174\t        </div>\n   175\t        \n   176\t        <div className=\"bg-white rounded-lg shadow-md p-6\">\n   177\t          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n   178\t            <span className=\"text-2xl mr-2\">🔄</span> Sincronização\n   179\t          </h3>\n   180\t          <ul className=\"space-y-2 text-sm\">\n   181\t            <li className=\"flex items-start\">\n   182\t              <span className=\"text-green-500 mr-2\">✓</span>\n   183\t              <span>WebSocket com reconnect automático</span>\n   184\t            </li>\n   185\t            <li className=\"flex items-start\">\n   186\t              <span className=\"text-green-500 mr-2\">✓</span>\n   187\t              <span>Fila de sincronização com retry</span>\n   188\t            </li>\n   189\t            <li className=\"flex items-start\">\n   190\t              <span className=\"text-green-500 mr-2\">✓</span>\n   191\t              <span>Resolução de conflitos inteligente</span>\n   192\t            </li>\n   193\t            <li className=\"flex items-start\">\n   194\t              <span className=\"text-green-500 mr-2\">✓</span>\n   195\t              <span>Heartbeat e detecção de falhas</span>\n   196\t            </li>\n   197\t          </ul>\n   198\t        </div>\n   199\t        \n   200\t        <div className=\"bg-white rounded-lg shadow-md p-6\">\n   201\t          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n   202\t            <span className=\"text-2xl mr-2\">📊</span> Monitoramento\n   203\t          </h3>\n   204\t          <ul className=\"space-y-2 text-sm\">\n   205\t            <li className=\"flex items-start\">\n   206\t              <span className=\"text-green-500 mr-2\">✓</span>\n   207\t              <span>Métricas P50/P95/P99</span>\n   208\t            </li>\n   209\t            <li className=\"flex items-start\">\n   210\t              <span className=\"text-green-500 mr-2\">✓</span>\n   211\t              <span>Dashboard em tempo real</span>\n   212\t            </li>\n   213\t            <li className=\"flex items-start\">\n   214\t              <span className=\"text-green-500 mr-2\">✓</span>\n   215\t              <span>Sistema de alertas</span>\n   216\t            </li>\n   217\t            <li className=\"flex items-start\">\n   218\t              <span className=\"text-green-500 mr-2\">✓</span>\n   219\t              <span>Health checks automáticos</span>\n   220\t            </li>\n   221\t          </ul>\n   222\t        </div>\n   223\t        \n   224\t        <div className=\"bg-white rounded-lg shadow-md p-6\">\n   225\t          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n   226\t            <span className=\"text-2xl mr-2\">🚀</span> Performance\n   227\t          </h3>\n   228\t          <ul className=\"space-y-2 text-sm\">\n   229\t            <li className=\"flex items-start\">\n   230\t              <span className=\"text-green-500 mr-2\">✓</span>\n   231\t              <span>Cache multi-camadas</span>\n   232\t            </li>\n   233\t            <li className=\"flex items-start\">\n   234\t              <span className=\"text-green-500 mr-2\">✓</span>\n   235\t              <span>Service Worker offline-first</span>\n   236\t            </li>\n   237\t            <li className=\"flex items-start\">\n   238\t              <span className=\"text-green-500 mr-2\">✓</span>\n   239\t              <span>Lazy loading otimizado</span>\n   240\t            </li>\n   241\t            <li className=\"flex items-start\">\n   242\t              <span className=\"text-green-500 mr-2\">✓</span>\n   243\t              <span>PWA com instalação</span>\n   244\t            </li>\n   245\t          </ul>\n   246\t        </div>\n   247\t      </div>\n   248\t      \n   249\t      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n   250\t        <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n   251\t          <p className=\"text-sm text-gray-600\">Latência P95</p>\n   252\t          <p className=\"text-2xl font-bold text-blue-600\">45ms</p>\n   253\t        </div>\n   254\t        <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n   255\t          <p className=\"text-sm text-gray-600\">Taxa de Sync</p>\n   256\t          <p className=\"text-2xl font-bold text-green-600\">99.8%</p>\n   257\t        </div>\n   258\t        <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n   259\t          <p className=\"text-sm text-gray-600\">Cache Hit Rate</p>\n   260\t          <p className=\"text-2xl font-bold text-orange-600\">87%</p>\n   261\t        </div>\n   262\t        <div className=\"bg-purple-50 rounded-lg p-4 text-center\">\n   263\t          <p className=\"text-sm text-gray-600\">Armazenamento</p>\n   264\t          <p className=\"text-2xl font-bold text-purple-600\">142MB</p>\n   265\t        </div>\n   266\t      </div>\n   267\t    </div>\n   268\t  )\n   269\t}\n   270\t\n   271\t// Página de Monitoramento\n   272\tfunction MonitoringPage() {\n   273\t  return (\n   274\t    <div className=\"container mx-auto px-4 py-8\">\n   275\t      <h1 className=\"text-3xl font-bold mb-8\">Monitoramento em Tempo Real</h1>\n   276\t      \n   277\t      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n   278\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   279\t          <h3 className=\"text-sm text-gray-600 mb-2\">CPU</h3>\n   280\t          <div className=\"text-3xl font-bold text-blue-600\">42%</div>\n   281\t          <div className=\"mt-2 bg-gray-200 rounded-full h-2\">\n   282\t            <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '42%' }}></div>\n   283\t          </div>\n   284\t        </div>\n   285\t        \n   286\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   287\t          <h3 className=\"text-sm text-gray-600 mb-2\">Memória</h3>\n   288\t          <div className=\"text-3xl font-bold text-green-600\">68%</div>\n   289\t          <div className=\"mt-2 bg-gray-200 rounded-full h-2\">\n   290\t            <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '68%' }}></div>\n   291\t          </div>\n   292\t        </div>\n   293\t        \n   294\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   295\t          <h3 className=\"text-sm text-gray-600 mb-2\">Requisições/min</h3>\n   296\t          <div className=\"text-3xl font-bold text-purple-600\">1,247</div>\n   297\t          <div className=\"text-sm text-gray-500 mt-1\">↑ 12% vs última hora</div>\n   298\t        </div>\n   299\t        \n   300\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   301\t          <h3 className=\"text-sm text-gray-600 mb-2\">Erros</h3>\n   302\t          <div className=\"text-3xl font-bold text-red-600\">3</div>\n   303\t          <div className=\"text-sm text-gray-500 mt-1\">↓ 25% vs última hora</div>\n   304\t        </div>\n   305\t      </div>\n   306\t      \n   307\t      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n   308\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   309\t          <h2 className=\"text-xl font-semibold mb-4\">Status dos Serviços</h2>\n   310\t          <div className=\"space-y-3\">\n   311\t            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n   312\t              <span>PGlite Database</span>\n   313\t              <span className=\"text-green-600 font-medium\">● Online</span>\n   314\t            </div>\n   315\t            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n   316\t              <span>WebSocket Server</span>\n   317\t              <span className=\"text-green-600 font-medium\">● Online</span>\n   318\t            </div>\n   319\t            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n   320\t              <span>Service Worker</span>\n   321\t              <span className=\"text-green-600 font-medium\">● Ativo</span>\n   322\t            </div>\n   323\t            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n   324\t              <span>Cache Layer</span>\n   325\t              <span className=\"text-yellow-600 font-medium\">● Parcial (87%)</span>\n   326\t            </div>\n   327\t          </div>\n   328\t        </div>\n   329\t        \n   330\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   331\t          <h2 className=\"text-xl font-semibold mb-4\">Logs Recentes</h2>\n   332\t          <div className=\"space-y-2 font-mono text-sm\">\n   333\t            <div className=\"text-gray-600\">[14:32:01] INFO: Sync completed successfully</div>\n   334\t            <div className=\"text-green-600\">[14:31:45] SUCCESS: Backup created</div>\n   335\t            <div className=\"text-yellow-600\">[14:30:22] WARN: High memory usage detected</div>\n   336\t            <div className=\"text-gray-600\">[14:29:15] INFO: Cache cleared</div>\n   337\t            <div className=\"text-red-600\">[14:28:03] ERROR: Connection timeout</div>\n   338\t          </div>\n   339\t        </div>\n   340\t      </div>\n   341\t    </div>\n   342\t  )\n   343\t}\n   344\t\n   345\t// Página de Sincronização\n   346\tfunction SyncPage() {\n   347\t  return (\n   348\t    <div className=\"container mx-auto px-4 py-8\">\n   349\t      <h1 className=\"text-3xl font-bold mb-8\">Status de Sincronização</h1>\n   350\t      \n   351\t      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n   352\t        <div className=\"flex items-center justify-between mb-4\">\n   353\t          <h2 className=\"text-xl font-semibold\">Sincronização Automática</h2>\n   354\t          <button className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\">\n   355\t            ● Ativada\n   356\t          </button>\n   357\t        </div>\n   358\t        \n   359\t        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n   360\t          <div className=\"text-center p-4 bg-gray-50 rounded\">\n   361\t            <div className=\"text-2xl font-bold text-blue-600\">15 seg</div>\n   362\t            <div className=\"text-sm text-gray-600\">Intervalo de Sync</div>\n   363\t          </div>\n   364\t          <div className=\"text-center p-4 bg-gray-50 rounded\">\n   365\t            <div className=\"text-2xl font-bold text-green-600\">1,428</div>\n   366\t            <div className=\"text-sm text-gray-600\">Syncs Hoje</div>\n   367\t          </div>\n   368\t          <div className=\"text-center p-4 bg-gray-50 rounded\">\n   369\t            <div className=\"text-2xl font-bold text-purple-600\">99.8%</div>\n   370\t            <div className=\"text-sm text-gray-600\">Taxa de Sucesso</div>\n   371\t          </div>\n   372\t        </div>\n   373\t      </div>\n   374\t      \n   375\t      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   376\t        <h2 className=\"text-xl font-semibold mb-4\">Fila de Sincronização</h2>\n   377\t        <div className=\"space-y-3\">\n   378\t          <div className=\"flex items-center justify-between p-4 bg-green-50 rounded\">\n   379\t            <div>\n   380\t              <div className=\"font-medium\">Tabela: sync_metrics</div>\n   381\t              <div className=\"text-sm text-gray-600\">142 registros sincronizados</div>\n   382\t            </div>\n   383\t            <span className=\"text-green-600\">✓ Concluído</span>\n   384\t          </div>\n   385\t          <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded\">\n   386\t            <div>\n   387\t              <div className=\"font-medium\">Tabela: embeddings</div>\n   388\t              <div className=\"text-sm text-gray-600\">Sincronizando... 78/120</div>\n   389\t            </div>\n   390\t            <span className=\"text-yellow-600\">⏳ Em progresso</span>\n   391\t          </div>\n   392\t          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n   393\t            <div>\n   394\t              <div className=\"font-medium\">Tabela: documents</div>\n   395\t              <div className=\"text-sm text-gray-600\">Aguardando...</div>\n   396\t            </div>\n   397\t            <span className=\"text-gray-600\">○ Pendente</span>\n   398\t          </div>\n   399\t        </div>\n   400\t      </div>\n   401\t    </div>\n   402\t  )\n   403\t}\n   404\t\n   405\t// Página de Rollout\n   406\tfunction RolloutPage() {\n   407\t  return (\n   408\t    <div className=\"container mx-auto px-4 py-8\">\n   409\t      <h1 className=\"text-3xl font-bold mb-8\">Controle de Rollout</h1>\n   410\t      \n   411\t      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n   412\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   413\t          <h3 className=\"text-lg font-semibold mb-4\">Progresso do Rollout</h3>\n   414\t          <div className=\"text-center\">\n   415\t            <div className=\"text-5xl font-bold text-blue-600 mb-2\">15%</div>\n   416\t            <div className=\"text-gray-600\">dos usuários migrados</div>\n   417\t            <div className=\"mt-4 bg-gray-200 rounded-full h-3\">\n   418\t              <div className=\"bg-blue-600 h-3 rounded-full\" style={{ width: '15%' }}></div>\n   419\t            </div>\n   420\t          </div>\n   421\t        </div>\n   422\t        \n   423\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   424\t          <h3 className=\"text-lg font-semibold mb-4\">Métricas de Sucesso</h3>\n   425\t          <div className=\"space-y-3\">\n   426\t            <div className=\"flex justify-between\">\n   427\t              <span className=\"text-gray-600\">Taxa de Erro</span>\n   428\t              <span className=\"font-bold text-green-600\">0.2%</span>\n   429\t            </div>\n   430\t            <div className=\"flex justify-between\">\n   431\t              <span className=\"text-gray-600\">Performance</span>\n   432\t              <span className=\"font-bold text-green-600\">+12%</span>\n   433\t            </div>\n   434\t            <div className=\"flex justify-between\">\n   435\t              <span className=\"text-gray-600\">Satisfação</span>\n   436\t              <span className=\"font-bold text-green-600\">4.8/5</span>\n   437\t            </div>\n   438\t          </div>\n   439\t        </div>\n   440\t        \n   441\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   442\t          <h3 className=\"text-lg font-semibold mb-4\">Controles</h3>\n   443\t          <div className=\"space-y-3\">\n   444\t            <button className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">\n   445\t              Aumentar para 20%\n   446\t            </button>\n   447\t            <button className=\"w-full bg-yellow-500 text-white py-2 rounded hover:bg-yellow-600\">\n   448\t              Pausar Rollout\n   449\t            </button>\n   450\t            <button className=\"w-full bg-red-500 text-white py-2 rounded hover:bg-red-600\">\n   451\t              Rollback\n   452\t            </button>\n   453\t          </div>\n   454\t        </div>\n   455\t      </div>\n   456\t      \n   457\t      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   458\t        <h2 className=\"text-xl font-semibold mb-4\">Feature Flags Ativos</h2>\n   459\t        <div className=\"space-y-3\">\n   460\t          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n   461\t            <div>\n   462\t              <div className=\"font-medium\">offline-first-mode</div>\n   463\t              <div className=\"text-sm text-gray-600\">Habilita modo offline completo</div>\n   464\t            </div>\n   465\t            <label className=\"relative inline-flex items-center cursor-pointer\">\n   466\t              <input type=\"checkbox\" checked readOnly className=\"sr-only peer\" />\n   467\t              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n   468\t            </label>\n   469\t          </div>\n   470\t          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n   471\t            <div>\n   472\t              <div className=\"font-medium\">local-embeddings</div>\n   473\t              <div className=\"text-sm text-gray-600\">Processamento de embeddings local</div>\n   474\t            </div>\n   475\t            <label className=\"relative inline-flex items-center cursor-pointer\">\n   476\t              <input type=\"checkbox\" checked readOnly className=\"sr-only peer\" />\n   477\t              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n   478\t            </label>\n   479\t          </div>\n   480\t        </div>\n   481\t      </div>\n   482\t    </div>\n   483\t  )\n   484\t}\n   485\t\n   486\t// Página de Configurações\n   487\tfunction SettingsPage() {\n   488\t  return (\n   489\t    <div className=\"container mx-auto px-4 py-8\">\n   490\t      <h1 className=\"text-3xl font-bold mb-8\">Configurações do Sistema</h1>\n   491\t      \n   492\t      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n   493\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   494\t          <h2 className=\"text-xl font-semibold mb-4\">Banco de Dados</h2>\n   495\t          <div className=\"space-y-4\">\n   496\t            <div>\n   497\t              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n   498\t                Modo de Armazenamento\n   499\t              </label>\n   500\t              <select className=\"w-full p-2 border rounded\">\n   501\t                <option>IndexedDB (Recomendado)</option>\n   502\t                <option>WebSQL</option>\n   503\t                <option>LocalStorage</option>\n   504\t              </select>\n   505\t            </div>\n   506\t            <div>\n   507\t              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n   508\t                Tamanho Máximo (MB)\n   509\t              </label>\n   510\t              <input type=\"number\" defaultValue=\"500\" className=\"w-full p-2 border rounded\" />\n   511\t            </div>\n   512\t            <div>\n   513\t              <label className=\"flex items-center\">\n   514\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   515\t                <span className=\"text-sm\">Compressão automática</span>\n   516\t              </label>\n   517\t            </div>\n   518\t          </div>\n   519\t        </div>\n   520\t        \n   521\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   522\t          <h2 className=\"text-xl font-semibold mb-4\">Sincronização</h2>\n   523\t          <div className=\"space-y-4\">\n   524\t            <div>\n   525\t              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n   526\t                Intervalo (segundos)\n   527\t              </label>\n   528\t              <input type=\"number\" defaultValue=\"15\" className=\"w-full p-2 border rounded\" />\n   529\t            </div>\n   530\t            <div>\n   531\t              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n   532\t                Estratégia de Conflito\n   533\t              </label>\n   534\t              <select className=\"w-full p-2 border rounded\">\n   535\t                <option>Última escrita vence</option>\n   536\t                <option>Merge automático</option>\n   537\t                <option>Perguntar ao usuário</option>\n   538\t              </select>\n   539\t            </div>\n   540\t            <div>\n   541\t              <label className=\"flex items-center\">\n   542\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   543\t                <span className=\"text-sm\">Sync automático ao ficar online</span>\n   544\t              </label>\n   545\t            </div>\n   546\t          </div>\n   547\t        </div>\n   548\t        \n   549\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   550\t          <h2 className=\"text-xl font-semibold mb-4\">Performance</h2>\n   551\t          <div className=\"space-y-4\">\n   552\t            <div>\n   553\t              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n   554\t                Cache TTL (minutos)\n   555\t              </label>\n   556\t              <input type=\"number\" defaultValue=\"60\" className=\"w-full p-2 border rounded\" />\n   557\t            </div>\n   558\t            <div>\n   559\t              <label className=\"flex items-center\">\n   560\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   561\t                <span className=\"text-sm\">Lazy loading de componentes</span>\n   562\t              </label>\n   563\t            </div>\n   564\t            <div>\n   565\t              <label className=\"flex items-center\">\n   566\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   567\t                <span className=\"text-sm\">Pré-cache de recursos críticos</span>\n   568\t              </label>\n   569\t            </div>\n   570\t          </div>\n   571\t        </div>\n   572\t        \n   573\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   574\t          <h2 className=\"text-xl font-semibold mb-4\">Segurança</h2>\n   575\t          <div className=\"space-y-4\">\n   576\t            <div>\n   577\t              <label className=\"flex items-center\">\n   578\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   579\t                <span className=\"text-sm\">Criptografia local</span>\n   580\t              </label>\n   581\t            </div>\n   582\t            <div>\n   583\t              <label className=\"flex items-center\">\n   584\t                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n   585\t                <span className=\"text-sm\">Validação de integridade</span>\n   586\t              </label>\n   587\t            </div>\n   588\t            <button className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">\n   589\t              Limpar todos os dados locais\n   590\t            </button>\n   591\t          </div>\n   592\t        </div>\n   593\t      </div>\n   594\t    </div>\n   595\t  )\n   596\t}\n   597\t\n   598\t\n   599\t// App Principal\n   600\tfunction AppContent() {\n   601\t  return (\n   602\t    <div className=\"min-h-screen bg-gray-100\">\n   603\t      <Navigation />\n   604\t      \n   605\t      <Routes>\n   606\t        {/* Páginas Antigas */}\n   607\t        <Route path=\"/potential-issues\" element={<PotentialIssues />} />\n   608\t        <Route path=\"/missions\" element={<Missions />} />\n   609\t        <Route path=\"/claude-sessions\" element={<ClaudeSessions />} />\n   610\t        <Route path=\"/claude-sessions/:sessionId\" element={<ClaudeSessionDetailSimple />} />\n   611\t        <Route path=\"/claude-sessions/:sessionId/:filter\" element={<ClaudeSessionDetailSimple />} />\n   612\t        <Route path=\"/chat\" element={<Chat />} />\n   613\t        <Route path=\"/documents\" element={<Documents />} />\n   614\t        \n   615\t        {/* Dashboard Principal - Sistema de Migração */}\n   616\t        <Route path=\"/\" element={<MigrationDashboard />} />\n   617\t        \n   618\t        {/* Páginas do Sistema de Migração */}\n   619\t        <Route path=\"/monitoring\" element={<MonitoringPage />} />\n   620\t        <Route path=\"/sync\" element={<SyncPage />} />\n   621\t        <Route path=\"/rollout\" element={<RolloutPage />} />\n   622\t        <Route path=\"/settings\" element={<SettingsPage />} />\n   623\t      </Routes>\n   624\t    </div>\n   625\t  )\n   626\t}\n   627\t\n   628\t// Componente App com Providers\n   629\texport function App() {\n   630\t  return (\n   631\t    <QueryClientProvider client={queryClient}>\n   632\t      <BrowserRouter>\n   633\t        <AppContent />\n   634\t      </BrowserRouter>\n   635\t    </QueryClientProvider>\n   636\t  )\n   637\t}"}]},"uuid":"d5d63cd2-6bd8-413d-8b17-ecc59b62d4f9","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx","content":"import { BrowserRouter, Routes, Route, Link, useLocation } from 'react-router-dom'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\n\n// Importar páginas antigas\nimport { PotentialIssues } from './pages/PotentialIssues'\nimport { Missions } from './pages/Missions'\nimport { ClaudeSessions } from './pages/ClaudeSessions'\nimport { Chat } from './pages/Chat'\nimport Documents from './pages/Documents'\nimport { ClaudeSessionDetailSimple } from './pages/ClaudeSessionDetailSimple'\n\n// Criar QueryClient\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 5 * 60 * 1000,\n      retry: false // Desabilitar retry por enquanto para evitar erros\n    }\n  }\n})\n\n// Componente de Navegação\nfunction Navigation() {\n  const location = useLocation()\n  \n  const isActive = (path: string) => {\n    return location.pathname === path\n  }\n  \n  return (\n    <nav className=\"bg-white shadow-sm mb-6\">\n      <div className=\"container mx-auto px-4 py-3\">\n        <div className=\"flex space-x-6 flex-wrap items-center\">\n          {/* Páginas Antigas */}\n          <Link \n            to=\"/potential-issues\" \n            className={`font-medium transition-colors ${\n              isActive('/potential-issues') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Potenciais Problemas\n          </Link>\n          \n          <Link \n            to=\"/missions\" \n            className={`font-medium transition-colors ${\n              isActive('/missions') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Missões\n          </Link>\n          \n          <Link \n            to=\"/claude-sessions\" \n            className={`font-medium transition-colors ${\n              isActive('/claude-sessions') || location.pathname.startsWith('/claude-sessions/') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Claude Sessions\n          </Link>\n          \n          <Link \n            to=\"/chat\" \n            className={`font-medium transition-colors ${\n              isActive('/chat') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Chat\n          </Link>\n          \n          <Link \n            to=\"/documents\" \n            className={`font-medium transition-colors ${\n              isActive('/documents') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Documentos\n          </Link>\n          \n          {/* Separador */}\n          <span className=\"text-gray-300\">|</span>\n          \n          {/* Páginas Novas - Sistema de Migração */}\n          <Link \n            to=\"/\" \n            className={`font-medium transition-colors ${\n              isActive('/') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Dashboard\n          </Link>\n          \n          \n          <Link \n            to=\"/monitoring\" \n            className={`font-medium transition-colors ${\n              isActive('/monitoring') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Monitoramento\n          </Link>\n          \n          <Link \n            to=\"/sync\" \n            className={`font-medium transition-colors ${\n              isActive('/sync') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Sincronização\n          </Link>\n          \n          <Link \n            to=\"/rollout\" \n            className={`font-medium transition-colors ${\n              isActive('/rollout') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Rollout\n          </Link>\n          \n          <Link \n            to=\"/settings\" \n            className={`font-medium transition-colors ${\n              isActive('/settings') ? 'text-blue-800' : 'text-blue-600 hover:text-blue-800'\n            }`}\n          >\n            Configurações\n          </Link>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\n// Dashboard Principal\nfunction MigrationDashboard() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-6\">Dashboard - Sistema LightRAG</h1>\n      <p className=\"text-gray-600 mb-8\">Arquitetura Offline-First com PGlite + React 19 + pgvector</p>\n      \n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6 mb-8\">\n        <h2 className=\"text-xl font-semibold text-green-800 mb-2\">\n          ✅ Todas as 32 tarefas implementadas com sucesso!\n        </h2>\n        <p className=\"text-green-700\">\n          O sistema está pronto para funcionar completamente offline com RAG local.\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n            <span className=\"text-2xl mr-2\">🗄️</span> Base de Dados\n          </h3>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>PGlite com modo de emergência</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>pgvector para embeddings locais</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Drizzle ORM com schemas tipados</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Sistema de backup incremental</span>\n            </li>\n          </ul>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n            <span className=\"text-2xl mr-2\">🔄</span> Sincronização\n          </h3>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>WebSocket com reconnect automático</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Fila de sincronização com retry</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Resolução de conflitos inteligente</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Heartbeat e detecção de falhas</span>\n            </li>\n          </ul>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n            <span className=\"text-2xl mr-2\">📊</span> Monitoramento\n          </h3>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Métricas P50/P95/P99</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Dashboard em tempo real</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Sistema de alertas</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Health checks automáticos</span>\n            </li>\n          </ul>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n            <span className=\"text-2xl mr-2\">🚀</span> Performance\n          </h3>\n          <ul className=\"space-y-2 text-sm\">\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Cache multi-camadas</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Service Worker offline-first</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>Lazy loading otimizado</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-green-500 mr-2\">✓</span>\n              <span>PWA com instalação</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      \n      <div className=\"mt-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-blue-50 rounded-lg p-4 text-center\">\n          <p className=\"text-sm text-gray-600\">Latência P95</p>\n          <p className=\"text-2xl font-bold text-blue-600\">45ms</p>\n        </div>\n        <div className=\"bg-green-50 rounded-lg p-4 text-center\">\n          <p className=\"text-sm text-gray-600\">Taxa de Sync</p>\n          <p className=\"text-2xl font-bold text-green-600\">99.8%</p>\n        </div>\n        <div className=\"bg-orange-50 rounded-lg p-4 text-center\">\n          <p className=\"text-sm text-gray-600\">Cache Hit Rate</p>\n          <p className=\"text-2xl font-bold text-orange-600\">87%</p>\n        </div>\n        <div className=\"bg-purple-50 rounded-lg p-4 text-center\">\n          <p className=\"text-sm text-gray-600\">Armazenamento</p>\n          <p className=\"text-2xl font-bold text-purple-600\">142MB</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Página de Monitoramento\nfunction MonitoringPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Monitoramento em Tempo Real</h1>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-sm text-gray-600 mb-2\">CPU</h3>\n          <div className=\"text-3xl font-bold text-blue-600\">42%</div>\n          <div className=\"mt-2 bg-gray-200 rounded-full h-2\">\n            <div className=\"bg-blue-600 h-2 rounded-full\" style={{ width: '42%' }}></div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-sm text-gray-600 mb-2\">Memória</h3>\n          <div className=\"text-3xl font-bold text-green-600\">68%</div>\n          <div className=\"mt-2 bg-gray-200 rounded-full h-2\">\n            <div className=\"bg-green-600 h-2 rounded-full\" style={{ width: '68%' }}></div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-sm text-gray-600 mb-2\">Requisições/min</h3>\n          <div className=\"text-3xl font-bold text-purple-600\">1,247</div>\n          <div className=\"text-sm text-gray-500 mt-1\">↑ 12% vs última hora</div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-sm text-gray-600 mb-2\">Erros</h3>\n          <div className=\"text-3xl font-bold text-red-600\">3</div>\n          <div className=\"text-sm text-gray-500 mt-1\">↓ 25% vs última hora</div>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Status dos Serviços</h2>\n          <div className=\"space-y-3\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <span>PGlite Database</span>\n              <span className=\"text-green-600 font-medium\">● Online</span>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <span>WebSocket Server</span>\n              <span className=\"text-green-600 font-medium\">● Online</span>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <span>Service Worker</span>\n              <span className=\"text-green-600 font-medium\">● Ativo</span>\n            </div>\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded\">\n              <span>Cache Layer</span>\n              <span className=\"text-yellow-600 font-medium\">● Parcial (87%)</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Logs Recentes</h2>\n          <div className=\"space-y-2 font-mono text-sm\">\n            <div className=\"text-gray-600\">[14:32:01] INFO: Sync completed successfully</div>\n            <div className=\"text-green-600\">[14:31:45] SUCCESS: Backup created</div>\n            <div className=\"text-yellow-600\">[14:30:22] WARN: High memory usage detected</div>\n            <div className=\"text-gray-600\">[14:29:15] INFO: Cache cleared</div>\n            <div className=\"text-red-600\">[14:28:03] ERROR: Connection timeout</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Página de Sincronização\nfunction SyncPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Status de Sincronização</h1>\n      \n      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-semibold\">Sincronização Automática</h2>\n          <button className=\"bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600\">\n            ● Ativada\n          </button>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"text-center p-4 bg-gray-50 rounded\">\n            <div className=\"text-2xl font-bold text-blue-600\">15 seg</div>\n            <div className=\"text-sm text-gray-600\">Intervalo de Sync</div>\n          </div>\n          <div className=\"text-center p-4 bg-gray-50 rounded\">\n            <div className=\"text-2xl font-bold text-green-600\">1,428</div>\n            <div className=\"text-sm text-gray-600\">Syncs Hoje</div>\n          </div>\n          <div className=\"text-center p-4 bg-gray-50 rounded\">\n            <div className=\"text-2xl font-bold text-purple-600\">99.8%</div>\n            <div className=\"text-sm text-gray-600\">Taxa de Sucesso</div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Fila de Sincronização</h2>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between p-4 bg-green-50 rounded\">\n            <div>\n              <div className=\"font-medium\">Tabela: sync_metrics</div>\n              <div className=\"text-sm text-gray-600\">142 registros sincronizados</div>\n            </div>\n            <span className=\"text-green-600\">✓ Concluído</span>\n          </div>\n          <div className=\"flex items-center justify-between p-4 bg-yellow-50 rounded\">\n            <div>\n              <div className=\"font-medium\">Tabela: embeddings</div>\n              <div className=\"text-sm text-gray-600\">Sincronizando... 78/120</div>\n            </div>\n            <span className=\"text-yellow-600\">⏳ Em progresso</span>\n          </div>\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n            <div>\n              <div className=\"font-medium\">Tabela: documents</div>\n              <div className=\"text-sm text-gray-600\">Aguardando...</div>\n            </div>\n            <span className=\"text-gray-600\">○ Pendente</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Página de Rollout\nfunction RolloutPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Controle de Rollout</h1>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Progresso do Rollout</h3>\n          <div className=\"text-center\">\n            <div className=\"text-5xl font-bold text-blue-600 mb-2\">15%</div>\n            <div className=\"text-gray-600\">dos usuários migrados</div>\n            <div className=\"mt-4 bg-gray-200 rounded-full h-3\">\n              <div className=\"bg-blue-600 h-3 rounded-full\" style={{ width: '15%' }}></div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Métricas de Sucesso</h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Taxa de Erro</span>\n              <span className=\"font-bold text-green-600\">0.2%</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Performance</span>\n              <span className=\"font-bold text-green-600\">+12%</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span className=\"text-gray-600\">Satisfação</span>\n              <span className=\"font-bold text-green-600\">4.8/5</span>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h3 className=\"text-lg font-semibold mb-4\">Controles</h3>\n          <div className=\"space-y-3\">\n            <button className=\"w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600\">\n              Aumentar para 20%\n            </button>\n            <button className=\"w-full bg-yellow-500 text-white py-2 rounded hover:bg-yellow-600\">\n              Pausar Rollout\n            </button>\n            <button className=\"w-full bg-red-500 text-white py-2 rounded hover:bg-red-600\">\n              Rollback\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-white rounded-lg shadow-sm p-6\">\n        <h2 className=\"text-xl font-semibold mb-4\">Feature Flags Ativos</h2>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n            <div>\n              <div className=\"font-medium\">offline-first-mode</div>\n              <div className=\"text-sm text-gray-600\">Habilita modo offline completo</div>\n            </div>\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n              <input type=\"checkbox\" checked readOnly className=\"sr-only peer\" />\n              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n            </label>\n          </div>\n          <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded\">\n            <div>\n              <div className=\"font-medium\">local-embeddings</div>\n              <div className=\"text-sm text-gray-600\">Processamento de embeddings local</div>\n            </div>\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n              <input type=\"checkbox\" checked readOnly className=\"sr-only peer\" />\n              <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n            </label>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Página de Configurações\nfunction SettingsPage() {\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <h1 className=\"text-3xl font-bold mb-8\">Configurações do Sistema</h1>\n      \n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Banco de Dados</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Modo de Armazenamento\n              </label>\n              <select className=\"w-full p-2 border rounded\">\n                <option>IndexedDB (Recomendado)</option>\n                <option>WebSQL</option>\n                <option>LocalStorage</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Tamanho Máximo (MB)\n              </label>\n              <input type=\"number\" defaultValue=\"500\" className=\"w-full p-2 border rounded\" />\n            </div>\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Compressão automática</span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Sincronização</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Intervalo (segundos)\n              </label>\n              <input type=\"number\" defaultValue=\"15\" className=\"w-full p-2 border rounded\" />\n            </div>\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Estratégia de Conflito\n              </label>\n              <select className=\"w-full p-2 border rounded\">\n                <option>Última escrita vence</option>\n                <option>Merge automático</option>\n                <option>Perguntar ao usuário</option>\n              </select>\n            </div>\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Sync automático ao ficar online</span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Performance</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Cache TTL (minutos)\n              </label>\n              <input type=\"number\" defaultValue=\"60\" className=\"w-full p-2 border rounded\" />\n            </div>\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Lazy loading de componentes</span>\n              </label>\n            </div>\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Pré-cache de recursos críticos</span>\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Segurança</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Criptografia local</span>\n              </label>\n            </div>\n            <div>\n              <label className=\"flex items-center\">\n                <input type=\"checkbox\" className=\"mr-2\" defaultChecked />\n                <span className=\"text-sm\">Validação de integridade</span>\n              </label>\n            </div>\n            <button className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">\n              Limpar todos os dados locais\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n\n// App Principal\nfunction AppContent() {\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <Navigation />\n      \n      <Routes>\n        {/* Páginas Antigas */}\n        <Route path=\"/potential-issues\" element={<PotentialIssues />} />\n        <Route path=\"/missions\" element={<Missions />} />\n        <Route path=\"/claude-sessions\" element={<ClaudeSessions />} />\n        <Route path=\"/claude-sessions/:sessionId\" element={<ClaudeSessionDetailSimple />} />\n        <Route path=\"/claude-sessions/:sessionId/:filter\" element={<ClaudeSessionDetailSimple />} />\n        <Route path=\"/chat\" element={<Chat />} />\n        <Route path=\"/documents\" element={<Documents />} />\n        \n        {/* Dashboard Principal - Sistema de Migração */}\n        <Route path=\"/\" element={<MigrationDashboard />} />\n        \n        {/* Páginas do Sistema de Migração */}\n        <Route path=\"/monitoring\" element={<MonitoringPage />} />\n        <Route path=\"/sync\" element={<SyncPage />} />\n        <Route path=\"/rollout\" element={<RolloutPage />} />\n        <Route path=\"/settings\" element={<SettingsPage />} />\n      </Routes>\n    </div>\n  )\n}\n\n// Componente App com Providers\nexport function App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        <AppContent />\n      </BrowserRouter>\n    </QueryClientProvider>\n  )\n}","numLines":637,"startLine":1,"totalLines":637}}}
{"parentUuid":"d5d63cd2-6bd8-413d-8b17-ecc59b62d4f9","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Cu9uuvSJcJXrAgwmJfjvrr","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou verificar o vite.config.ts para entender a configuração de build."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":10061,"cache_read_input_tokens":27401,"output_tokens":99,"service_tier":"standard"}},"costUSD":0.118607625,"durationMs":6948,"uuid":"f21fe809-8092-4566-b6f0-bcadbc93701b"}
{"parentUuid":"f21fe809-8092-4566-b6f0-bcadbc93701b","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Cu9uuvSJcJXrAgwmJfjvrr","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_01Tz5PMTbMV5Jwdvy9tTUUTe","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/vite.config.ts"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":10061,"cache_read_input_tokens":27401,"output_tokens":99,"service_tier":"standard"}},"costUSD":0.118607625,"durationMs":6948,"uuid":"fe57b923-207d-49a7-8608-f614f014ca58"}
{"parentUuid":"fe57b923-207d-49a7-8608-f614f014ca58","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01Tz5PMTbMV5Jwdvy9tTUUTe","type":"tool_result","content":"     1\timport tailwindcss from '@tailwindcss/vite'\n     2\timport react from '@vitejs/plugin-react'\n     3\timport { defineConfig } from 'vite'\n     4\t\n     5\texport default defineConfig({\n     6\t  plugins: [\n     7\t    react(),\n     8\t    tailwindcss()\n     9\t  ],\n    10\t  \n    11\t  build: {\n    12\t    target: 'esnext',\n    13\t    minify: 'terser',\n    14\t    terserOptions: {\n    15\t      compress: {\n    16\t        drop_console: true,\n    17\t        drop_debugger: true,\n    18\t        pure_funcs: ['console.log', 'console.info', 'console.debug'],\n    19\t        passes: 2\n    20\t      },\n    21\t      mangle: {\n    22\t        safari10: true\n    23\t      },\n    24\t      format: {\n    25\t        comments: false\n    26\t      }\n    27\t    },\n    28\t    \n    29\t    rollupOptions: {\n    30\t      output: {\n    31\t        manualChunks: {\n    32\t          'react-vendor': ['react', 'react-dom'],\n    33\t          'db-vendor': ['@electric-sql/pglite', 'drizzle-orm'],\n    34\t          'ui-vendor': ['@tanstack/react-query', 'date-fns', 'zod']\n    35\t        },\n    36\t        \n    37\t        chunkFileNames: 'assets/js/[name]-[hash].js',\n    38\t        entryFileNames: 'assets/js/[name]-[hash].js',\n    39\t        assetFileNames: 'assets/[ext]/[name]-[hash].[ext]'\n    40\t      }\n    41\t    },\n    42\t    \n    43\t    chunkSizeWarningLimit: 1000,\n    44\t    sourcemap: false,\n    45\t    cssCodeSplit: true,\n    46\t    reportCompressedSize: false,\n    47\t    assetsInlineLimit: 4096\n    48\t  },\n    49\t  \n    50\t  optimizeDeps: {\n    51\t    include: ['react', 'react-dom', 'drizzle-orm'],\n    52\t    exclude: ['@electric-sql/pglite']\n    53\t  },\n    54\t  \n    55\t  resolve: {\n    56\t    alias: {\n    57\t      '@': '/src',\n    58\t      '@components': '/src/components',\n    59\t      '@utils': '/src/utils',\n    60\t      '@hooks': '/src/hooks'\n    61\t    }\n    62\t  }\n    63\t})\n    64\t"}]},"uuid":"13f69dbb-ec6f-4b69-83e6-9d26f130d85f","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/vite.config.ts","content":"import tailwindcss from '@tailwindcss/vite'\nimport react from '@vitejs/plugin-react'\nimport { defineConfig } from 'vite'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    tailwindcss()\n  ],\n  \n  build: {\n    target: 'esnext',\n    minify: 'terser',\n    terserOptions: {\n      compress: {\n        drop_console: true,\n        drop_debugger: true,\n        pure_funcs: ['console.log', 'console.info', 'console.debug'],\n        passes: 2\n      },\n      mangle: {\n        safari10: true\n      },\n      format: {\n        comments: false\n      }\n    },\n    \n    rollupOptions: {\n      output: {\n        manualChunks: {\n          'react-vendor': ['react', 'react-dom'],\n          'db-vendor': ['@electric-sql/pglite', 'drizzle-orm'],\n          'ui-vendor': ['@tanstack/react-query', 'date-fns', 'zod']\n        },\n        \n        chunkFileNames: 'assets/js/[name]-[hash].js',\n        entryFileNames: 'assets/js/[name]-[hash].js',\n        assetFileNames: 'assets/[ext]/[name]-[hash].[ext]'\n      }\n    },\n    \n    chunkSizeWarningLimit: 1000,\n    sourcemap: false,\n    cssCodeSplit: true,\n    reportCompressedSize: false,\n    assetsInlineLimit: 4096\n  },\n  \n  optimizeDeps: {\n    include: ['react', 'react-dom', 'drizzle-orm'],\n    exclude: ['@electric-sql/pglite']\n  },\n  \n  resolve: {\n    alias: {\n      '@': '/src',\n      '@components': '/src/components',\n      '@utils': '/src/utils',\n      '@hooks': '/src/hooks'\n    }\n  }\n})\n","numLines":64,"startLine":1,"totalLines":64}}}
{"parentUuid":"13f69dbb-ec6f-4b69-83e6-9d26f130d85f","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Qc1pwmkH76u2SoWDxTniRQ","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Agora vou marcar a primeira tarefa como concluída e iniciar a segunda tarefa."}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":819,"cache_read_input_tokens":37462,"output_tokens":320,"service_tier":"standard"}},"costUSD":0.047797125,"durationMs":11658,"uuid":"a131dc97-1eaf-4eca-9d46-36303cb8b11e"}
{"parentUuid":"a131dc97-1eaf-4eca-9d46-36303cb8b11e","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"msg_01Qc1pwmkH76u2SoWDxTniRQ","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_012h7AYQjjfowGRawxkRhzf3","name":"TodoWrite","input":{"todos":[{"id":"investigate-frontend-1","content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high"},{"id":"investigate-frontend-2","content":"Analisar arquivos principais e configuração do projeto frontend","status":"in_progress","priority":"high"},{"id":"investigate-frontend-3","content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium"},{"id":"investigate-frontend-4","content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium"},{"id":"investigate-frontend-5","content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":819,"cache_read_input_tokens":37462,"output_tokens":320,"service_tier":"standard"}},"costUSD":0.047797125,"durationMs":11658,"uuid":"eda4858e-338d-4160-b353-1bc134ee84cf"}
{"parentUuid":"eda4858e-338d-4160-b353-1bc134ee84cf","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_012h7AYQjjfowGRawxkRhzf3","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"1f8a0135-f408-4f17-aafc-9e6a7e32267c","timestamp":"2025-05-26T06:47:50.691Z","toolUseResult":{"oldTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"in_progress","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"pending","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}],"newTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"in_progress","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}]}}
{"parentUuid":"1f8a0135-f408-4f17-aafc-9e6a7e32267c","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"assistant","costUSD":0,"durationMs":0,"uuid":"fde3e16a-bd7c-4032-af9f-181ff5667837","timestamp":"2025-05-26T06:47:50.691Z","message":{"id":"442cfa57-7c4b-4c1c-a924-0e68bca71891","model":"<synthetic>","role":"assistant","stop_reason":"stop_sequence","stop_sequence":"","type":"message","usage":{"input_tokens":0,"output_tokens":0,"cache_creation_input_tokens":0,"cache_read_input_tokens":0,"server_tool_use":{"web_search_requests":0}},"content":[{"type":"text","text":"No response requested."}]},"isApiErrorMessage":false}
{"parentUuid":"fde3e16a-bd7c-4032-af9f-181ff5667837","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":"isso paece ser um mock Logs Recentes\n[14:32:01] INFO: Sync completed successfully\n[14:31:45] SUCCESS: Backup created\n[14:30:22] WARN: High memory usage detected\n[14:29:15] INFO: Cache cleared\n[14:28:03] ERROR: Connection timeout"},"uuid":"1d1ce3f0-a6a4-4d63-99da-bfd611f1518c","timestamp":"2025-05-26T06:48:01.560Z"}
{"parentUuid":"1d1ce3f0-a6a4-4d63-99da-bfd611f1518c","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01BbNNQAs9w43FQd4qHygmHS","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Sim, você está certo! Esses logs são mockados/hardcoded no componente. Vou continuar investigando para encontrar a implementação real do sistema de monitoramento."},{"type":"tool_use","id":"toolu_01XNXm24CxAgEcd15a5kx5vs","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-hooks.ts"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":38471,"cache_read_input_tokens":0,"output_tokens":125,"service_tier":"standard"}},"costUSD":0.73076625,"durationMs":8046,"type":"assistant","uuid":"10098cab-beab-48e0-b4fa-4294844172e0","timestamp":"2025-05-26T06:48:09.655Z"}
{"parentUuid":"10098cab-beab-48e0-b4fa-4294844172e0","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01XNXm24CxAgEcd15a5kx5vs","type":"tool_result","content":"     1\timport { useState, useEffect, useRef } from 'react';\n     2\timport { HealthChecker, SystemHealth } from './health-checker';\n     3\timport { MetricsCollector } from '../utils/metrics-collector';\n     4\timport { WebSocketManager } from '../sync/websocket-manager';\n     5\timport { SyncEngine } from '../sync/sync-engine';\n     6\t\n     7\texport interface MonitoringConfig {\n     8\t  healthCheckInterval?: number;\n     9\t  metricsInterval?: number;\n    10\t  alertThresholds?: {\n    11\t    errorRate?: number;\n    12\t    latencyP95?: number;\n    13\t    memoryUsage?: number;\n    14\t    storageUsage?: number;\n    15\t  };\n    16\t}\n    17\t\n    18\texport function useHealthMonitoring(\n    19\t  config: MonitoringConfig = {},\n    20\t  dependencies?: {\n    21\t    wsManager?: WebSocketManager;\n    22\t    syncEngine?: SyncEngine;\n    23\t  }\n    24\t) {\n    25\t  const [health, setHealth] = useState<SystemHealth | null>(null);\n    26\t  const [isMonitoring, setIsMonitoring] = useState(false);\n    27\t  const healthCheckerRef = useRef<HealthChecker | null>(null);\n    28\t\n    29\t  useEffect(() => {\n    30\t    const checker = new HealthChecker(config.healthCheckInterval);\n    31\t    healthCheckerRef.current = checker;\n    32\t\n    33\t    // Registrar checks adicionais se dependencies foram fornecidas\n    34\t    if (dependencies?.wsManager) {\n    35\t      checker.registerWebSocketCheck(dependencies.wsManager);\n    36\t    }\n    37\t    if (dependencies?.syncEngine) {\n    38\t      checker.registerSyncCheck(dependencies.syncEngine);\n    39\t    }\n    40\t\n    41\t    // Configurar listener\n    42\t    const unsubscribe = checker.onHealthChange(setHealth);\n    43\t\n    44\t    return () => {\n    45\t      unsubscribe();\n    46\t      checker.destroy();\n    47\t    };\n    48\t  }, [config.healthCheckInterval]);\n    49\t\n    50\t  const startMonitoring = () => {\n    51\t    if (healthCheckerRef.current && !isMonitoring) {\n    52\t      healthCheckerRef.current.startMonitoring();\n    53\t      setIsMonitoring(true);\n    54\t    }\n    55\t  };\n    56\t\n    57\t  const stopMonitoring = () => {\n    58\t    if (healthCheckerRef.current && isMonitoring) {\n    59\t      healthCheckerRef.current.stopMonitoring();\n    60\t      setIsMonitoring(false);\n    61\t    }\n    62\t  };\n    63\t\n    64\t  const runCheck = async (service?: string) => {\n    65\t    if (!healthCheckerRef.current) return null;\n    66\t\n    67\t    if (service) {\n    68\t      return await healthCheckerRef.current.runCheck(service);\n    69\t    } else {\n    70\t      const result = await healthCheckerRef.current.runAllChecks();\n    71\t      setHealth(result);\n    72\t      return result;\n    73\t    }\n    74\t  };\n    75\t\n    76\t  return {\n    77\t    health,\n    78\t    isMonitoring,\n    79\t    startMonitoring,\n    80\t    stopMonitoring,\n    81\t    runCheck,\n    82\t    healthChecker: healthCheckerRef.current\n    83\t  };\n    84\t}\n    85\t\n    86\texport function useMetricsMonitoring(config: MonitoringConfig = {}) {\n    87\t  const [metrics, setMetrics] = useState<Record<string, any>>({});\n    88\t  const collectorRef = useRef<MetricsCollector | null>(null);\n    89\t  const intervalRef = useRef<number | null>(null);\n    90\t\n    91\t  useEffect(() => {\n    92\t    if (!collectorRef.current) {\n    93\t      collectorRef.current = MetricsCollector.getInstance();\n    94\t    }\n    95\t\n    96\t    const updateMetrics = () => {\n    97\t      if (collectorRef.current) {\n    98\t        setMetrics(collectorRef.current.getAllMetrics());\n    99\t      }\n   100\t    };\n   101\t\n   102\t    // Atualizar métricas inicialmente\n   103\t    updateMetrics();\n   104\t\n   105\t    // Configurar intervalo de atualização\n   106\t    if (config.metricsInterval) {\n   107\t      intervalRef.current = window.setInterval(updateMetrics, config.metricsInterval);\n   108\t    }\n   109\t\n   110\t    return () => {\n   111\t      if (intervalRef.current) {\n   112\t        clearInterval(intervalRef.current);\n   113\t      }\n   114\t    };\n   115\t  }, [config.metricsInterval]);\n   116\t\n   117\t  const recordMetric = (category: string, metric: string, value: number) => {\n   118\t    if (collectorRef.current) {\n   119\t      collectorRef.current.recordMetric(category, metric, value);\n   120\t      // Atualizar estado imediatamente\n   121\t      setMetrics(collectorRef.current.getAllMetrics());\n   122\t    }\n   123\t  };\n   124\t\n   125\t  const getMetric = (category: string, metric?: string) => {\n   126\t    if (!collectorRef.current) return null;\n   127\t\n   128\t    if (metric) {\n   129\t      return collectorRef.current.getMetric(category, metric);\n   130\t    } else {\n   131\t      const categoryMetrics = collectorRef.current.getAllMetrics()[category];\n   132\t      return categoryMetrics || {};\n   133\t    }\n   134\t  };\n   135\t\n   136\t  const resetMetrics = (category?: string) => {\n   137\t    if (collectorRef.current) {\n   138\t      collectorRef.current.reset(category);\n   139\t      setMetrics(collectorRef.current.getAllMetrics());\n   140\t    }\n   141\t  };\n   142\t\n   143\t  return {\n   144\t    metrics,\n   145\t    recordMetric,\n   146\t    getMetric,\n   147\t    resetMetrics,\n   148\t    metricsCollector: collectorRef.current\n   149\t  };\n   150\t}\n   151\t\n   152\texport function useSystemAlerts(config: MonitoringConfig = {}) {\n   153\t  const [alerts, setAlerts] = useState<Array<{\n   154\t    id: string;\n   155\t    type: 'error' | 'warning' | 'info';\n   156\t    message: string;\n   157\t    timestamp: number;\n   158\t    details?: any;\n   159\t  }>>([]);\n   160\t\n   161\t  const { health } = useHealthMonitoring(config);\n   162\t  const { metrics } = useMetricsMonitoring(config);\n   163\t\n   164\t  useEffect(() => {\n   165\t    if (!health || !config.alertThresholds) return;\n   166\t\n   167\t    const newAlerts: typeof alerts = [];\n   168\t\n   169\t    // Verificar saúde do sistema\n   170\t    if (health.overall === 'unhealthy') {\n   171\t      const unhealthyServices = health.checks\n   172\t        .filter(c => c.status === 'unhealthy')\n   173\t        .map(c => c.service);\n   174\t\n   175\t      newAlerts.push({\n   176\t        id: `health-${Date.now()}`,\n   177\t        type: 'error',\n   178\t        message: `Serviços com problemas: ${unhealthyServices.join(', ')}`,\n   179\t        timestamp: Date.now(),\n   180\t        details: { unhealthyServices }\n   181\t      });\n   182\t    }\n   183\t\n   184\t    // Verificar métricas\n   185\t    if (metrics.sync?.errorRate > (config.alertThresholds.errorRate || 0.05)) {\n   186\t      newAlerts.push({\n   187\t        id: `error-rate-${Date.now()}`,\n   188\t        type: 'warning',\n   189\t        message: `Taxa de erro alta: ${(metrics.sync.errorRate * 100).toFixed(1)}%`,\n   190\t        timestamp: Date.now(),\n   191\t        details: { errorRate: metrics.sync.errorRate }\n   192\t      });\n   193\t    }\n   194\t\n   195\t    if (metrics.database?.queryLatency?.p95 > (config.alertThresholds.latencyP95 || 1000)) {\n   196\t      newAlerts.push({\n   197\t        id: `latency-${Date.now()}`,\n   198\t        type: 'warning',\n   199\t        message: `Latência do banco alta: P95 = ${metrics.database.queryLatency.p95.toFixed(0)}ms`,\n   200\t        timestamp: Date.now(),\n   201\t        details: { latency: metrics.database.queryLatency }\n   202\t      });\n   203\t    }\n   204\t\n   205\t    // Adicionar novos alertas\n   206\t    if (newAlerts.length > 0) {\n   207\t      setAlerts(prev => [...newAlerts, ...prev].slice(0, 50)); // Manter últimos 50 alertas\n   208\t    }\n   209\t  }, [health, metrics, config.alertThresholds]);\n   210\t\n   211\t  const dismissAlert = (id: string) => {\n   212\t    setAlerts(prev => prev.filter(a => a.id !== id));\n   213\t  };\n   214\t\n   215\t  const clearAlerts = () => {\n   216\t    setAlerts([]);\n   217\t  };\n   218\t\n   219\t  return {\n   220\t    alerts,\n   221\t    dismissAlert,\n   222\t    clearAlerts\n   223\t  };\n   224\t}\n   225\t\n   226\t// Hook para performance timing\n   227\texport function usePerformanceTiming(operation: string) {\n   228\t  const startTimeRef = useRef<number>(0);\n   229\t  const { recordMetric } = useMetricsMonitoring();\n   230\t\n   231\t  const startTiming = () => {\n   232\t    startTimeRef.current = performance.now();\n   233\t  };\n   234\t\n   235\t  const endTiming = (category: string = 'performance') => {\n   236\t    if (startTimeRef.current === 0) return;\n   237\t\n   238\t    const duration = performance.now() - startTimeRef.current;\n   239\t    recordMetric(category, operation, duration);\n   240\t    startTimeRef.current = 0;\n   241\t\n   242\t    return duration;\n   243\t  };\n   244\t\n   245\t  return { startTiming, endTiming };\n   246\t}\n   247\t\n   248\t// Hook para monitorar recursos\n   249\texport function useResourceMonitoring(intervalMs: number = 5000) {\n   250\t  const [resources, setResources] = useState({\n   251\t    memory: { used: 0, total: 0, percentage: 0 },\n   252\t    storage: { used: 0, quota: 0, percentage: 0 },\n   253\t    cpu: { usage: 0 }\n   254\t  });\n   255\t\n   256\t  useEffect(() => {\n   257\t    const checkResources = async () => {\n   258\t      const newResources = { ...resources };\n   259\t\n   260\t      // Memory check\n   261\t      if ('memory' in performance) {\n   262\t        const memory = (performance as any).memory;\n   263\t        newResources.memory = {\n   264\t          used: memory.usedJSHeapSize,\n   265\t          total: memory.jsHeapSizeLimit,\n   266\t          percentage: (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100\n   267\t        };\n   268\t      }\n   269\t\n   270\t      // Storage check\n   271\t      if ('storage' in navigator && 'estimate' in navigator.storage) {\n   272\t        const estimate = await navigator.storage.estimate();\n   273\t        newResources.storage = {\n   274\t          used: estimate.usage || 0,\n   275\t          quota: estimate.quota || 0,\n   276\t          percentage: ((estimate.usage || 0) / (estimate.quota || 1)) * 100\n   277\t        };\n   278\t      }\n   279\t\n   280\t      setResources(newResources);\n   281\t    };\n   282\t\n   283\t    checkResources();\n   284\t    const interval = setInterval(checkResources, intervalMs);\n   285\t\n   286\t    return () => clearInterval(interval);\n   287\t  }, [intervalMs]);\n   288\t\n   289\t  return resources;\n   290\t}"}]},"uuid":"b775abbb-a97e-4d50-aa71-2e1f6772a447","timestamp":"2025-05-26T06:48:09.676Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-hooks.ts","content":"import { useState, useEffect, useRef } from 'react';\nimport { HealthChecker, SystemHealth } from './health-checker';\nimport { MetricsCollector } from '../utils/metrics-collector';\nimport { WebSocketManager } from '../sync/websocket-manager';\nimport { SyncEngine } from '../sync/sync-engine';\n\nexport interface MonitoringConfig {\n  healthCheckInterval?: number;\n  metricsInterval?: number;\n  alertThresholds?: {\n    errorRate?: number;\n    latencyP95?: number;\n    memoryUsage?: number;\n    storageUsage?: number;\n  };\n}\n\nexport function useHealthMonitoring(\n  config: MonitoringConfig = {},\n  dependencies?: {\n    wsManager?: WebSocketManager;\n    syncEngine?: SyncEngine;\n  }\n) {\n  const [health, setHealth] = useState<SystemHealth | null>(null);\n  const [isMonitoring, setIsMonitoring] = useState(false);\n  const healthCheckerRef = useRef<HealthChecker | null>(null);\n\n  useEffect(() => {\n    const checker = new HealthChecker(config.healthCheckInterval);\n    healthCheckerRef.current = checker;\n\n    // Registrar checks adicionais se dependencies foram fornecidas\n    if (dependencies?.wsManager) {\n      checker.registerWebSocketCheck(dependencies.wsManager);\n    }\n    if (dependencies?.syncEngine) {\n      checker.registerSyncCheck(dependencies.syncEngine);\n    }\n\n    // Configurar listener\n    const unsubscribe = checker.onHealthChange(setHealth);\n\n    return () => {\n      unsubscribe();\n      checker.destroy();\n    };\n  }, [config.healthCheckInterval]);\n\n  const startMonitoring = () => {\n    if (healthCheckerRef.current && !isMonitoring) {\n      healthCheckerRef.current.startMonitoring();\n      setIsMonitoring(true);\n    }\n  };\n\n  const stopMonitoring = () => {\n    if (healthCheckerRef.current && isMonitoring) {\n      healthCheckerRef.current.stopMonitoring();\n      setIsMonitoring(false);\n    }\n  };\n\n  const runCheck = async (service?: string) => {\n    if (!healthCheckerRef.current) return null;\n\n    if (service) {\n      return await healthCheckerRef.current.runCheck(service);\n    } else {\n      const result = await healthCheckerRef.current.runAllChecks();\n      setHealth(result);\n      return result;\n    }\n  };\n\n  return {\n    health,\n    isMonitoring,\n    startMonitoring,\n    stopMonitoring,\n    runCheck,\n    healthChecker: healthCheckerRef.current\n  };\n}\n\nexport function useMetricsMonitoring(config: MonitoringConfig = {}) {\n  const [metrics, setMetrics] = useState<Record<string, any>>({});\n  const collectorRef = useRef<MetricsCollector | null>(null);\n  const intervalRef = useRef<number | null>(null);\n\n  useEffect(() => {\n    if (!collectorRef.current) {\n      collectorRef.current = MetricsCollector.getInstance();\n    }\n\n    const updateMetrics = () => {\n      if (collectorRef.current) {\n        setMetrics(collectorRef.current.getAllMetrics());\n      }\n    };\n\n    // Atualizar métricas inicialmente\n    updateMetrics();\n\n    // Configurar intervalo de atualização\n    if (config.metricsInterval) {\n      intervalRef.current = window.setInterval(updateMetrics, config.metricsInterval);\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [config.metricsInterval]);\n\n  const recordMetric = (category: string, metric: string, value: number) => {\n    if (collectorRef.current) {\n      collectorRef.current.recordMetric(category, metric, value);\n      // Atualizar estado imediatamente\n      setMetrics(collectorRef.current.getAllMetrics());\n    }\n  };\n\n  const getMetric = (category: string, metric?: string) => {\n    if (!collectorRef.current) return null;\n\n    if (metric) {\n      return collectorRef.current.getMetric(category, metric);\n    } else {\n      const categoryMetrics = collectorRef.current.getAllMetrics()[category];\n      return categoryMetrics || {};\n    }\n  };\n\n  const resetMetrics = (category?: string) => {\n    if (collectorRef.current) {\n      collectorRef.current.reset(category);\n      setMetrics(collectorRef.current.getAllMetrics());\n    }\n  };\n\n  return {\n    metrics,\n    recordMetric,\n    getMetric,\n    resetMetrics,\n    metricsCollector: collectorRef.current\n  };\n}\n\nexport function useSystemAlerts(config: MonitoringConfig = {}) {\n  const [alerts, setAlerts] = useState<Array<{\n    id: string;\n    type: 'error' | 'warning' | 'info';\n    message: string;\n    timestamp: number;\n    details?: any;\n  }>>([]);\n\n  const { health } = useHealthMonitoring(config);\n  const { metrics } = useMetricsMonitoring(config);\n\n  useEffect(() => {\n    if (!health || !config.alertThresholds) return;\n\n    const newAlerts: typeof alerts = [];\n\n    // Verificar saúde do sistema\n    if (health.overall === 'unhealthy') {\n      const unhealthyServices = health.checks\n        .filter(c => c.status === 'unhealthy')\n        .map(c => c.service);\n\n      newAlerts.push({\n        id: `health-${Date.now()}`,\n        type: 'error',\n        message: `Serviços com problemas: ${unhealthyServices.join(', ')}`,\n        timestamp: Date.now(),\n        details: { unhealthyServices }\n      });\n    }\n\n    // Verificar métricas\n    if (metrics.sync?.errorRate > (config.alertThresholds.errorRate || 0.05)) {\n      newAlerts.push({\n        id: `error-rate-${Date.now()}`,\n        type: 'warning',\n        message: `Taxa de erro alta: ${(metrics.sync.errorRate * 100).toFixed(1)}%`,\n        timestamp: Date.now(),\n        details: { errorRate: metrics.sync.errorRate }\n      });\n    }\n\n    if (metrics.database?.queryLatency?.p95 > (config.alertThresholds.latencyP95 || 1000)) {\n      newAlerts.push({\n        id: `latency-${Date.now()}`,\n        type: 'warning',\n        message: `Latência do banco alta: P95 = ${metrics.database.queryLatency.p95.toFixed(0)}ms`,\n        timestamp: Date.now(),\n        details: { latency: metrics.database.queryLatency }\n      });\n    }\n\n    // Adicionar novos alertas\n    if (newAlerts.length > 0) {\n      setAlerts(prev => [...newAlerts, ...prev].slice(0, 50)); // Manter últimos 50 alertas\n    }\n  }, [health, metrics, config.alertThresholds]);\n\n  const dismissAlert = (id: string) => {\n    setAlerts(prev => prev.filter(a => a.id !== id));\n  };\n\n  const clearAlerts = () => {\n    setAlerts([]);\n  };\n\n  return {\n    alerts,\n    dismissAlert,\n    clearAlerts\n  };\n}\n\n// Hook para performance timing\nexport function usePerformanceTiming(operation: string) {\n  const startTimeRef = useRef<number>(0);\n  const { recordMetric } = useMetricsMonitoring();\n\n  const startTiming = () => {\n    startTimeRef.current = performance.now();\n  };\n\n  const endTiming = (category: string = 'performance') => {\n    if (startTimeRef.current === 0) return;\n\n    const duration = performance.now() - startTimeRef.current;\n    recordMetric(category, operation, duration);\n    startTimeRef.current = 0;\n\n    return duration;\n  };\n\n  return { startTiming, endTiming };\n}\n\n// Hook para monitorar recursos\nexport function useResourceMonitoring(intervalMs: number = 5000) {\n  const [resources, setResources] = useState({\n    memory: { used: 0, total: 0, percentage: 0 },\n    storage: { used: 0, quota: 0, percentage: 0 },\n    cpu: { usage: 0 }\n  });\n\n  useEffect(() => {\n    const checkResources = async () => {\n      const newResources = { ...resources };\n\n      // Memory check\n      if ('memory' in performance) {\n        const memory = (performance as any).memory;\n        newResources.memory = {\n          used: memory.usedJSHeapSize,\n          total: memory.jsHeapSizeLimit,\n          percentage: (memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100\n        };\n      }\n\n      // Storage check\n      if ('storage' in navigator && 'estimate' in navigator.storage) {\n        const estimate = await navigator.storage.estimate();\n        newResources.storage = {\n          used: estimate.usage || 0,\n          quota: estimate.quota || 0,\n          percentage: ((estimate.usage || 0) / (estimate.quota || 1)) * 100\n        };\n      }\n\n      setResources(newResources);\n    };\n\n    checkResources();\n    const interval = setInterval(checkResources, intervalMs);\n\n    return () => clearInterval(interval);\n  }, [intervalMs]);\n\n  return resources;\n}","numLines":290,"startLine":1,"totalLines":290}}}
{"parentUuid":"b775abbb-a97e-4d50-aa71-2e1f6772a447","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01MUCy5jfGEDmkUjxcntXNyh","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Agora vou verificar o monitoring-dashboard.tsx para ver a implementação real do dashboard de monitoramento."},{"type":"tool_use","id":"toolu_01WeEnnBoa7aK76m288QqbZg","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-dashboard.tsx","limit":100}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":3529,"cache_read_input_tokens":38471,"output_tokens":124,"service_tier":"standard"}},"costUSD":0.13326525,"durationMs":5743,"type":"assistant","uuid":"c6b39b25-78f8-4ace-a9f5-b0a9d7140754","timestamp":"2025-05-26T06:48:15.435Z"}
{"parentUuid":"c6b39b25-78f8-4ace-a9f5-b0a9d7140754","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01WeEnnBoa7aK76m288QqbZg","type":"tool_result","content":"     1\timport React, { useState, useEffect } from 'react';\n     2\timport { HealthChecker } from './health-checker-simple';\n     3\timport { SystemHealth, HealthCheckResult } from './types';\n     4\timport { MetricsCollector } from '../utils/metrics-collector';\n     5\timport { formatDistanceToNow } from 'date-fns';\n     6\timport { ptBR } from 'date-fns/locale';\n     7\t\n     8\tinterface MonitoringDashboardProps {\n     9\t  healthChecker: HealthChecker;\n    10\t  metricsCollector: MetricsCollector;\n    11\t}\n    12\t\n    13\texport const MonitoringDashboard: React.FC<MonitoringDashboardProps> = ({ \n    14\t  healthChecker, \n    15\t  metricsCollector \n    16\t}) => {\n    17\t  const [health, setHealth] = useState<SystemHealth | null>(null);\n    18\t  const [metrics, setMetrics] = useState<Record<string, any>>({});\n    19\t  const [selectedService, setSelectedService] = useState<string | null>(null);\n    20\t  const [autoRefresh, setAutoRefresh] = useState(true);\n    21\t  const [refreshInterval, setRefreshInterval] = useState(30000);\n    22\t\n    23\t  useEffect(() => {\n    24\t    // Carregar dados iniciais\n    25\t    loadHealthData();\n    26\t    loadMetricsData();\n    27\t\n    28\t    // Configurar listeners\n    29\t    const unsubscribe = healthChecker.onHealthChange(setHealth);\n    30\t\n    31\t    // Auto-refresh\n    32\t    let interval: number | null = null;\n    33\t    if (autoRefresh) {\n    34\t      interval = window.setInterval(() => {\n    35\t        loadHealthData();\n    36\t        loadMetricsData();\n    37\t      }, refreshInterval);\n    38\t    }\n    39\t\n    40\t    return () => {\n    41\t      unsubscribe();\n    42\t      if (interval) clearInterval(interval);\n    43\t    };\n    44\t  }, [autoRefresh, refreshInterval]);\n    45\t\n    46\t  const loadHealthData = async () => {\n    47\t    const healthData = await healthChecker.runAllChecks();\n    48\t    setHealth(healthData);\n    49\t  };\n    50\t\n    51\t  const loadMetricsData = () => {\n    52\t    const allMetrics = metricsCollector.getAllMetrics();\n    53\t    setMetrics(allMetrics);\n    54\t  };\n    55\t\n    56\t  const getStatusColor = (status: 'healthy' | 'degraded' | 'unhealthy') => {\n    57\t    switch (status) {\n    58\t      case 'healthy': return 'text-green-600 bg-green-100';\n    59\t      case 'degraded': return 'text-yellow-600 bg-yellow-100';\n    60\t      case 'unhealthy': return 'text-red-600 bg-red-100';\n    61\t    }\n    62\t  };\n    63\t\n    64\t  const getStatusIcon = (status: 'healthy' | 'degraded' | 'unhealthy') => {\n    65\t    switch (status) {\n    66\t      case 'healthy': return '✓';\n    67\t      case 'degraded': return '⚠';\n    68\t      case 'unhealthy': return '✗';\n    69\t    }\n    70\t  };\n    71\t\n    72\t  const formatLatency = (ms?: number) => {\n    73\t    if (!ms) return '-';\n    74\t    if (ms < 1000) return `${ms}ms`;\n    75\t    return `${(ms / 1000).toFixed(2)}s`;\n    76\t  };\n    77\t\n    78\t  const renderMetricValue = (value: any): string => {\n    79\t    if (typeof value === 'number') {\n    80\t      return value.toFixed(2);\n    81\t    }\n    82\t    if (typeof value === 'object' && value !== null) {\n    83\t      if ('p50' in value && 'p95' in value && 'p99' in value) {\n    84\t        return `P50: ${value.p50.toFixed(0)}ms | P95: ${value.p95.toFixed(0)}ms | P99: ${value.p99.toFixed(0)}ms`;\n    85\t      }\n    86\t    }\n    87\t    return String(value);\n    88\t  };\n    89\t\n    90\t  if (!health) {\n    91\t    return (\n    92\t      <div className=\"monitoring-dashboard p-6\">\n    93\t        <div className=\"text-center text-gray-500\">Carregando dados de monitoramento...</div>\n    94\t      </div>\n    95\t    );\n    96\t  }\n    97\t\n    98\t  return (\n    99\t    <div className=\"monitoring-dashboard p-6 bg-gray-50 min-h-screen\">\n   100\t      <div className=\"max-w-7xl mx-auto\">"}]},"uuid":"4a05519a-61e7-482e-9b68-1076161bd475","timestamp":"2025-05-26T06:48:15.446Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-dashboard.tsx","content":"import React, { useState, useEffect } from 'react';\nimport { HealthChecker } from './health-checker-simple';\nimport { SystemHealth, HealthCheckResult } from './types';\nimport { MetricsCollector } from '../utils/metrics-collector';\nimport { formatDistanceToNow } from 'date-fns';\nimport { ptBR } from 'date-fns/locale';\n\ninterface MonitoringDashboardProps {\n  healthChecker: HealthChecker;\n  metricsCollector: MetricsCollector;\n}\n\nexport const MonitoringDashboard: React.FC<MonitoringDashboardProps> = ({ \n  healthChecker, \n  metricsCollector \n}) => {\n  const [health, setHealth] = useState<SystemHealth | null>(null);\n  const [metrics, setMetrics] = useState<Record<string, any>>({});\n  const [selectedService, setSelectedService] = useState<string | null>(null);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [refreshInterval, setRefreshInterval] = useState(30000);\n\n  useEffect(() => {\n    // Carregar dados iniciais\n    loadHealthData();\n    loadMetricsData();\n\n    // Configurar listeners\n    const unsubscribe = healthChecker.onHealthChange(setHealth);\n\n    // Auto-refresh\n    let interval: number | null = null;\n    if (autoRefresh) {\n      interval = window.setInterval(() => {\n        loadHealthData();\n        loadMetricsData();\n      }, refreshInterval);\n    }\n\n    return () => {\n      unsubscribe();\n      if (interval) clearInterval(interval);\n    };\n  }, [autoRefresh, refreshInterval]);\n\n  const loadHealthData = async () => {\n    const healthData = await healthChecker.runAllChecks();\n    setHealth(healthData);\n  };\n\n  const loadMetricsData = () => {\n    const allMetrics = metricsCollector.getAllMetrics();\n    setMetrics(allMetrics);\n  };\n\n  const getStatusColor = (status: 'healthy' | 'degraded' | 'unhealthy') => {\n    switch (status) {\n      case 'healthy': return 'text-green-600 bg-green-100';\n      case 'degraded': return 'text-yellow-600 bg-yellow-100';\n      case 'unhealthy': return 'text-red-600 bg-red-100';\n    }\n  };\n\n  const getStatusIcon = (status: 'healthy' | 'degraded' | 'unhealthy') => {\n    switch (status) {\n      case 'healthy': return '✓';\n      case 'degraded': return '⚠';\n      case 'unhealthy': return '✗';\n    }\n  };\n\n  const formatLatency = (ms?: number) => {\n    if (!ms) return '-';\n    if (ms < 1000) return `${ms}ms`;\n    return `${(ms / 1000).toFixed(2)}s`;\n  };\n\n  const renderMetricValue = (value: any): string => {\n    if (typeof value === 'number') {\n      return value.toFixed(2);\n    }\n    if (typeof value === 'object' && value !== null) {\n      if ('p50' in value && 'p95' in value && 'p99' in value) {\n        return `P50: ${value.p50.toFixed(0)}ms | P95: ${value.p95.toFixed(0)}ms | P99: ${value.p99.toFixed(0)}ms`;\n      }\n    }\n    return String(value);\n  };\n\n  if (!health) {\n    return (\n      <div className=\"monitoring-dashboard p-6\">\n        <div className=\"text-center text-gray-500\">Carregando dados de monitoramento...</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"monitoring-dashboard p-6 bg-gray-50 min-h-screen\">\n      <div className=\"max-w-7xl mx-auto\">","numLines":100,"startLine":1,"totalLines":312}}}
{"parentUuid":"4a05519a-61e7-482e-9b68-1076161bd475","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01Kd1LJzi41hJCvLq2LDZvy4","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou continuar lendo o arquivo."},{"type":"tool_use","id":"toolu_013rW7kHPj13QGawGWy3xMqx","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-dashboard.tsx","offset":100,"limit":200}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":1473,"cache_read_input_tokens":42000,"output_tokens":125,"service_tier":"standard"}},"costUSD":0.10006875,"durationMs":7032,"type":"assistant","uuid":"900b0e95-a8e4-4f69-a06e-ab566a336892","timestamp":"2025-05-26T06:48:22.491Z"}
{"parentUuid":"900b0e95-a8e4-4f69-a06e-ab566a336892","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013rW7kHPj13QGawGWy3xMqx","type":"tool_result","content":"   100\t      <div className=\"max-w-7xl mx-auto\">\n   101\t        {/* Header */}\n   102\t        <div className=\"header mb-8\">\n   103\t          <div className=\"flex justify-between items-center mb-4\">\n   104\t            <h1 className=\"text-3xl font-bold\">Dashboard de Monitoramento</h1>\n   105\t            \n   106\t            <div className=\"controls flex items-center gap-4\">\n   107\t              <label className=\"flex items-center\">\n   108\t                <input\n   109\t                  type=\"checkbox\"\n   110\t                  checked={autoRefresh}\n   111\t                  onChange={(e) => setAutoRefresh(e.target.checked)}\n   112\t                  className=\"mr-2\"\n   113\t                />\n   114\t                <span>Auto-refresh</span>\n   115\t              </label>\n   116\t              \n   117\t              <select\n   118\t                value={refreshInterval}\n   119\t                onChange={(e) => setRefreshInterval(Number(e.target.value))}\n   120\t                className=\"px-3 py-1 border rounded\"\n   121\t              >\n   122\t                <option value={10000}>10s</option>\n   123\t                <option value={30000}>30s</option>\n   124\t                <option value={60000}>1m</option>\n   125\t                <option value={300000}>5m</option>\n   126\t              </select>\n   127\t              \n   128\t              <button\n   129\t                onClick={() => {\n   130\t                  loadHealthData();\n   131\t                  loadMetricsData();\n   132\t                }}\n   133\t                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n   134\t              >\n   135\t                Atualizar\n   136\t              </button>\n   137\t            </div>\n   138\t          </div>\n   139\t          \n   140\t          {/* Overall Status */}\n   141\t          <div className={`overall-status p-4 rounded-lg ${getStatusColor(health.overall)}`}>\n   142\t            <div className=\"flex items-center gap-2\">\n   143\t              <span className=\"text-2xl\">{getStatusIcon(health.overall)}</span>\n   144\t              <span className=\"text-xl font-semibold capitalize\">\n   145\t                Sistema {health.overall === 'healthy' ? 'Saudável' : \n   146\t                        health.overall === 'degraded' ? 'Degradado' : 'Com Problemas'}\n   147\t              </span>\n   148\t              <span className=\"text-sm ml-auto\">\n   149\t                Última verificação: {formatDistanceToNow(health.timestamp, { addSuffix: true, locale: ptBR })}\n   150\t              </span>\n   151\t            </div>\n   152\t          </div>\n   153\t        </div>\n   154\t\n   155\t        {/* Services Grid */}\n   156\t        <div className=\"services-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n   157\t          {health.checks.map((check) => (\n   158\t            <div\n   159\t              key={check.service}\n   160\t              className={`service-card p-4 bg-white rounded-lg shadow cursor-pointer hover:shadow-lg transition-shadow ${\n   161\t                selectedService === check.service ? 'ring-2 ring-blue-500' : ''\n   162\t              }`}\n   163\t              onClick={() => setSelectedService(check.service)}\n   164\t            >\n   165\t              <div className=\"flex justify-between items-start mb-2\">\n   166\t                <h3 className=\"font-semibold capitalize\">{check.service}</h3>\n   167\t                <span className={`px-2 py-1 rounded text-sm ${getStatusColor(check.status)}`}>\n   168\t                  {getStatusIcon(check.status)} {check.status}\n   169\t                </span>\n   170\t              </div>\n   171\t              \n   172\t              <p className=\"text-sm text-gray-600 mb-2\">{check.message}</p>\n   173\t              \n   174\t              {check.latency && (\n   175\t                <p className=\"text-sm text-gray-500\">\n   176\t                  Latência: {formatLatency(check.latency)}\n   177\t                </p>\n   178\t              )}\n   179\t              \n   180\t              {check.details && (\n   181\t                <div className=\"mt-2 pt-2 border-t\">\n   182\t                  {Object.entries(check.details).slice(0, 2).map(([key, value]) => (\n   183\t                    <p key={key} className=\"text-xs text-gray-500\">\n   184\t                      {key}: {typeof value === 'number' ? value.toFixed(1) : String(value)}\n   185\t                    </p>\n   186\t                  ))}\n   187\t                </div>\n   188\t              )}\n   189\t            </div>\n   190\t          ))}\n   191\t        </div>\n   192\t\n   193\t        {/* Metrics Section */}\n   194\t        <div className=\"metrics-section mb-8\">\n   195\t          <h2 className=\"text-2xl font-bold mb-4\">Métricas de Performance</h2>\n   196\t          \n   197\t          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n   198\t            {Object.entries(metrics).map(([category, categoryMetrics]) => (\n   199\t              <div key={category} className=\"metrics-card bg-white p-4 rounded-lg shadow\">\n   200\t                <h3 className=\"font-semibold mb-3 capitalize\">{category}</h3>\n   201\t                \n   202\t                <div className=\"space-y-2\">\n   203\t                  {Object.entries(categoryMetrics as Record<string, any>).map(([metric, value]) => (\n   204\t                    <div key={metric} className=\"metric-row flex justify-between items-center\">\n   205\t                      <span className=\"text-sm text-gray-600\">{metric}:</span>\n   206\t                      <span className=\"text-sm font-mono\">\n   207\t                        {renderMetricValue(value)}\n   208\t                      </span>\n   209\t                    </div>\n   210\t                  ))}\n   211\t                </div>\n   212\t              </div>\n   213\t            ))}\n   214\t          </div>\n   215\t        </div>\n   216\t\n   217\t        {/* Selected Service Details */}\n   218\t        {selectedService && (\n   219\t          <div className=\"service-details bg-white p-6 rounded-lg shadow\">\n   220\t            <h2 className=\"text-xl font-bold mb-4\">\n   221\t              Detalhes: {selectedService}\n   222\t            </h2>\n   223\t            \n   224\t            {(() => {\n   225\t              const check = health.checks.find(c => c.service === selectedService);\n   226\t              if (!check) return null;\n   227\t              \n   228\t              return (\n   229\t                <div>\n   230\t                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n   231\t                    <div>\n   232\t                      <p className=\"text-sm text-gray-600\">Status</p>\n   233\t                      <p className={`font-semibold ${getStatusColor(check.status)}`}>\n   234\t                        {getStatusIcon(check.status)} {check.status}\n   235\t                      </p>\n   236\t                    </div>\n   237\t                    \n   238\t                    <div>\n   239\t                      <p className=\"text-sm text-gray-600\">Última verificação</p>\n   240\t                      <p className=\"font-semibold\">\n   241\t                        {formatDistanceToNow(check.timestamp, { addSuffix: true, locale: ptBR })}\n   242\t                      </p>\n   243\t                    </div>\n   244\t                    \n   245\t                    {check.latency && (\n   246\t                      <div>\n   247\t                        <p className=\"text-sm text-gray-600\">Latência</p>\n   248\t                        <p className=\"font-semibold\">{formatLatency(check.latency)}</p>\n   249\t                      </div>\n   250\t                    )}\n   251\t                  </div>\n   252\t                  \n   253\t                  <div className=\"mb-4\">\n   254\t                    <p className=\"text-sm text-gray-600 mb-1\">Mensagem</p>\n   255\t                    <p className=\"bg-gray-100 p-2 rounded\">{check.message}</p>\n   256\t                  </div>\n   257\t                  \n   258\t                  {check.details && (\n   259\t                    <div>\n   260\t                      <p className=\"text-sm text-gray-600 mb-2\">Detalhes Adicionais</p>\n   261\t                      <pre className=\"bg-gray-100 p-3 rounded text-xs overflow-auto\">\n   262\t                        {JSON.stringify(check.details, null, 2)}\n   263\t                      </pre>\n   264\t                    </div>\n   265\t                  )}\n   266\t                </div>\n   267\t              );\n   268\t            })()}\n   269\t          </div>\n   270\t        )}\n   271\t\n   272\t        {/* Quick Actions */}\n   273\t        <div className=\"quick-actions mt-8 p-4 bg-white rounded-lg shadow\">\n   274\t          <h3 className=\"font-semibold mb-3\">Ações Rápidas</h3>\n   275\t          \n   276\t          <div className=\"flex gap-2\">\n   277\t            <button\n   278\t              onClick={async () => {\n   279\t                const result = await healthChecker.runCheck('database');\n   280\t                alert(`Database check: ${result.status}\\n${result.message}`);\n   281\t              }}\n   282\t              className=\"px-3 py-1 bg-gray-200 rounded hover:bg-gray-300\"\n   283\t            >\n   284\t              Testar Database\n   285\t            </button>\n   286\t            \n   287\t            <button\n   288\t              onClick={async () => {\n   289\t                const result = await healthChecker.runCheck('network');\n   290\t                alert(`Network check: ${result.status}\\n${result.message}`);\n   291\t              }}\n   292\t              className=\"px-3 py-1 bg-gray-200 rounded hover:bg-gray-300\"\n   293\t            >\n   294\t              Testar Rede\n   295\t            </button>\n   296\t            \n   297\t            <button\n   298\t              onClick={() => {\n   299\t                metricsCollector.reset();"}]},"uuid":"e078e268-4506-4710-bd6d-2452746dc9d5","timestamp":"2025-05-26T06:48:22.497Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/monitoring-dashboard.tsx","content":"      <div className=\"max-w-7xl mx-auto\">\n        {/* Header */}\n        <div className=\"header mb-8\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h1 className=\"text-3xl font-bold\">Dashboard de Monitoramento</h1>\n            \n            <div className=\"controls flex items-center gap-4\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={autoRefresh}\n                  onChange={(e) => setAutoRefresh(e.target.checked)}\n                  className=\"mr-2\"\n                />\n                <span>Auto-refresh</span>\n              </label>\n              \n              <select\n                value={refreshInterval}\n                onChange={(e) => setRefreshInterval(Number(e.target.value))}\n                className=\"px-3 py-1 border rounded\"\n              >\n                <option value={10000}>10s</option>\n                <option value={30000}>30s</option>\n                <option value={60000}>1m</option>\n                <option value={300000}>5m</option>\n              </select>\n              \n              <button\n                onClick={() => {\n                  loadHealthData();\n                  loadMetricsData();\n                }}\n                className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n              >\n                Atualizar\n              </button>\n            </div>\n          </div>\n          \n          {/* Overall Status */}\n          <div className={`overall-status p-4 rounded-lg ${getStatusColor(health.overall)}`}>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-2xl\">{getStatusIcon(health.overall)}</span>\n              <span className=\"text-xl font-semibold capitalize\">\n                Sistema {health.overall === 'healthy' ? 'Saudável' : \n                        health.overall === 'degraded' ? 'Degradado' : 'Com Problemas'}\n              </span>\n              <span className=\"text-sm ml-auto\">\n                Última verificação: {formatDistanceToNow(health.timestamp, { addSuffix: true, locale: ptBR })}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"services-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n          {health.checks.map((check) => (\n            <div\n              key={check.service}\n              className={`service-card p-4 bg-white rounded-lg shadow cursor-pointer hover:shadow-lg transition-shadow ${\n                selectedService === check.service ? 'ring-2 ring-blue-500' : ''\n              }`}\n              onClick={() => setSelectedService(check.service)}\n            >\n              <div className=\"flex justify-between items-start mb-2\">\n                <h3 className=\"font-semibold capitalize\">{check.service}</h3>\n                <span className={`px-2 py-1 rounded text-sm ${getStatusColor(check.status)}`}>\n                  {getStatusIcon(check.status)} {check.status}\n                </span>\n              </div>\n              \n              <p className=\"text-sm text-gray-600 mb-2\">{check.message}</p>\n              \n              {check.latency && (\n                <p className=\"text-sm text-gray-500\">\n                  Latência: {formatLatency(check.latency)}\n                </p>\n              )}\n              \n              {check.details && (\n                <div className=\"mt-2 pt-2 border-t\">\n                  {Object.entries(check.details).slice(0, 2).map(([key, value]) => (\n                    <p key={key} className=\"text-xs text-gray-500\">\n                      {key}: {typeof value === 'number' ? value.toFixed(1) : String(value)}\n                    </p>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Metrics Section */}\n        <div className=\"metrics-section mb-8\">\n          <h2 className=\"text-2xl font-bold mb-4\">Métricas de Performance</h2>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {Object.entries(metrics).map(([category, categoryMetrics]) => (\n              <div key={category} className=\"metrics-card bg-white p-4 rounded-lg shadow\">\n                <h3 className=\"font-semibold mb-3 capitalize\">{category}</h3>\n                \n                <div className=\"space-y-2\">\n                  {Object.entries(categoryMetrics as Record<string, any>).map(([metric, value]) => (\n                    <div key={metric} className=\"metric-row flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">{metric}:</span>\n                      <span className=\"text-sm font-mono\">\n                        {renderMetricValue(value)}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Selected Service Details */}\n        {selectedService && (\n          <div className=\"service-details bg-white p-6 rounded-lg shadow\">\n            <h2 className=\"text-xl font-bold mb-4\">\n              Detalhes: {selectedService}\n            </h2>\n            \n            {(() => {\n              const check = health.checks.find(c => c.service === selectedService);\n              if (!check) return null;\n              \n              return (\n                <div>\n                  <div className=\"grid grid-cols-2 gap-4 mb-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-600\">Status</p>\n                      <p className={`font-semibold ${getStatusColor(check.status)}`}>\n                        {getStatusIcon(check.status)} {check.status}\n                      </p>\n                    </div>\n                    \n                    <div>\n                      <p className=\"text-sm text-gray-600\">Última verificação</p>\n                      <p className=\"font-semibold\">\n                        {formatDistanceToNow(check.timestamp, { addSuffix: true, locale: ptBR })}\n                      </p>\n                    </div>\n                    \n                    {check.latency && (\n                      <div>\n                        <p className=\"text-sm text-gray-600\">Latência</p>\n                        <p className=\"font-semibold\">{formatLatency(check.latency)}</p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"mb-4\">\n                    <p className=\"text-sm text-gray-600 mb-1\">Mensagem</p>\n                    <p className=\"bg-gray-100 p-2 rounded\">{check.message}</p>\n                  </div>\n                  \n                  {check.details && (\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-2\">Detalhes Adicionais</p>\n                      <pre className=\"bg-gray-100 p-3 rounded text-xs overflow-auto\">\n                        {JSON.stringify(check.details, null, 2)}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              );\n            })()}\n          </div>\n        )}\n\n        {/* Quick Actions */}\n        <div className=\"quick-actions mt-8 p-4 bg-white rounded-lg shadow\">\n          <h3 className=\"font-semibold mb-3\">Ações Rápidas</h3>\n          \n          <div className=\"flex gap-2\">\n            <button\n              onClick={async () => {\n                const result = await healthChecker.runCheck('database');\n                alert(`Database check: ${result.status}\\n${result.message}`);\n              }}\n              className=\"px-3 py-1 bg-gray-200 rounded hover:bg-gray-300\"\n            >\n              Testar Database\n            </button>\n            \n            <button\n              onClick={async () => {\n                const result = await healthChecker.runCheck('network');\n                alert(`Network check: ${result.status}\\n${result.message}`);\n              }}\n              className=\"px-3 py-1 bg-gray-200 rounded hover:bg-gray-300\"\n            >\n              Testar Rede\n            </button>\n            \n            <button\n              onClick={() => {\n                metricsCollector.reset();","numLines":200,"startLine":100,"totalLines":312}}}
{"parentUuid":"e078e268-4506-4710-bd6d-2452746dc9d5","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_014oD6DpGcjnKjpw4vYoe6aT","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou verificar os logs reais do sistema para ver de onde vêm os dados de monitoramento."},{"type":"tool_use","id":"toolu_019Agr6GVJBMhfknU3rbQpWL","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/monitoring/MonitoringPageComplete.tsx","limit":150}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":5,"cache_creation_input_tokens":2952,"cache_read_input_tokens":43473,"output_tokens":125,"service_tier":"standard"}},"costUSD":0.1300095,"durationMs":8323,"type":"assistant","uuid":"3b6a5745-9a72-4996-9423-6b37ce32463a","timestamp":"2025-05-26T06:48:30.829Z"}
{"parentUuid":"3b6a5745-9a72-4996-9423-6b37ce32463a","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"type":"tool_result","content":"File does not exist.","is_error":true,"tool_use_id":"toolu_019Agr6GVJBMhfknU3rbQpWL"}]},"uuid":"217f5eee-5f97-4385-a168-274281332f35","timestamp":"2025-05-26T06:48:30.846Z","toolUseResult":"Error: File does not exist."}
{"parentUuid":"217f5eee-5f97-4385-a168-274281332f35","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_0127fNVzXbPEhotEU4XKZVxt","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_01NFg6YMah6iq42CUAhABwPd","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/pages/MonitoringPageComplete.tsx","limit":150}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":6,"cache_creation_input_tokens":148,"cache_read_input_tokens":46425,"output_tokens":99,"service_tier":"standard"}},"costUSD":0.0799275,"durationMs":5159,"type":"assistant","uuid":"08b7ba0f-bb88-48b9-9e39-095f97004abc","timestamp":"2025-05-26T06:48:36.024Z"}
{"parentUuid":"08b7ba0f-bb88-48b9-9e39-095f97004abc","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01NFg6YMah6iq42CUAhABwPd","type":"tool_result","content":"     1\timport React from 'react';\n     2\timport { MonitoringDashboard } from '../monitoring/monitoring-dashboard';\n     3\timport { HealthChecker } from '../monitoring/health-checker-simple';\n     4\timport { MetricsCollector } from '../utils/metrics-collector';\n     5\t\n     6\texport function MonitoringPageComplete() {\n     7\t  // Criar instâncias dos serviços\n     8\t  const healthChecker = React.useMemo(() => new HealthChecker(30000, 5000), []);\n     9\t  const metricsCollector = React.useMemo(() => MetricsCollector.getInstance(), []);\n    10\t\n    11\t  React.useEffect(() => {\n    12\t    // Iniciar monitoramento\n    13\t    healthChecker.start();\n    14\t    \n    15\t    // Simular algumas métricas para demonstração\n    16\t    const interval = setInterval(() => {\n    17\t      // CPU (simulado)\n    18\t      metricsCollector.recordMetric('system', 'cpu-usage', 40 + Math.random() * 20);\n    19\t      \n    20\t      // Memória (simulado)\n    21\t      metricsCollector.recordMetric('system', 'memory-usage', 60 + Math.random() * 20);\n    22\t      \n    23\t      // Requisições\n    24\t      metricsCollector.recordMetric('app', 'requests', Math.floor(1000 + Math.random() * 500));\n    25\t      \n    26\t      // Erros\n    27\t      if (Math.random() > 0.9) {\n    28\t        metricsCollector.recordMetric('app', 'errors', 1);\n    29\t      }\n    30\t      \n    31\t      // Latência de API\n    32\t      metricsCollector.recordMetric('performance', 'api-latency', 20 + Math.random() * 100);\n    33\t    }, 5000);\n    34\t\n    35\t    return () => {\n    36\t      clearInterval(interval);\n    37\t      healthChecker.stop();\n    38\t    };\n    39\t  }, [healthChecker, metricsCollector]);\n    40\t\n    41\t  return (\n    42\t    <div className=\"min-h-screen bg-gray-50\">\n    43\t      <MonitoringDashboard \n    44\t        healthChecker={healthChecker}\n    45\t        metricsCollector={metricsCollector}\n    46\t      />\n    47\t    </div>\n    48\t  );\n    49\t}"}]},"uuid":"769fca35-e820-4608-97ee-d1accc047707","timestamp":"2025-05-26T06:48:36.032Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/pages/MonitoringPageComplete.tsx","content":"import React from 'react';\nimport { MonitoringDashboard } from '../monitoring/monitoring-dashboard';\nimport { HealthChecker } from '../monitoring/health-checker-simple';\nimport { MetricsCollector } from '../utils/metrics-collector';\n\nexport function MonitoringPageComplete() {\n  // Criar instâncias dos serviços\n  const healthChecker = React.useMemo(() => new HealthChecker(30000, 5000), []);\n  const metricsCollector = React.useMemo(() => MetricsCollector.getInstance(), []);\n\n  React.useEffect(() => {\n    // Iniciar monitoramento\n    healthChecker.start();\n    \n    // Simular algumas métricas para demonstração\n    const interval = setInterval(() => {\n      // CPU (simulado)\n      metricsCollector.recordMetric('system', 'cpu-usage', 40 + Math.random() * 20);\n      \n      // Memória (simulado)\n      metricsCollector.recordMetric('system', 'memory-usage', 60 + Math.random() * 20);\n      \n      // Requisições\n      metricsCollector.recordMetric('app', 'requests', Math.floor(1000 + Math.random() * 500));\n      \n      // Erros\n      if (Math.random() > 0.9) {\n        metricsCollector.recordMetric('app', 'errors', 1);\n      }\n      \n      // Latência de API\n      metricsCollector.recordMetric('performance', 'api-latency', 20 + Math.random() * 100);\n    }, 5000);\n\n    return () => {\n      clearInterval(interval);\n      healthChecker.stop();\n    };\n  }, [healthChecker, metricsCollector]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <MonitoringDashboard \n        healthChecker={healthChecker}\n        metricsCollector={metricsCollector}\n      />\n    </div>\n  );\n}","numLines":49,"startLine":1,"totalLines":49}}}
{"parentUuid":"769fca35-e820-4608-97ee-d1accc047707","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01Fooc1eDEsqMf3VETd2b54Q","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Aha! Aqui está a confirmação. As métricas mostradas são simuladas (veja linhas 16-33). Vou marcar a segunda tarefa como concluída e avançar para a terceira."},{"type":"tool_use","id":"toolu_011GuVq3fMVTmdi3VnTSCm5R","name":"TodoWrite","input":{"todos":[{"id":"investigate-frontend-1","content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high"},{"id":"investigate-frontend-2","content":"Analisar arquivos principais e configuração do projeto frontend","status":"completed","priority":"high"},{"id":"investigate-frontend-3","content":"Identificar tecnologias e frameworks utilizados","status":"in_progress","priority":"medium"},{"id":"investigate-frontend-4","content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium"},{"id":"investigate-frontend-5","content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":780,"cache_read_input_tokens":46573,"output_tokens":350,"service_tier":"standard"}},"costUSD":0.1107945,"durationMs":13080,"type":"assistant","uuid":"436132c9-aaea-414f-9606-15e33b2b95a9","timestamp":"2025-05-26T06:48:49.131Z"}
{"parentUuid":"436132c9-aaea-414f-9606-15e33b2b95a9","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011GuVq3fMVTmdi3VnTSCm5R","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"0ab8b1cb-5239-4234-ba08-44b434eeaf03","timestamp":"2025-05-26T06:48:49.154Z","toolUseResult":{"oldTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"in_progress","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"pending","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}],"newTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"completed","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"in_progress","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}]}}
{"parentUuid":"0ab8b1cb-5239-4234-ba08-44b434eeaf03","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01DNC2RnYTh1Wj356Ke99t4S","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"## Resumo das Tecnologias Identificadas:\n\n### Frontend Stack:\n- **React 19.1.0** - Biblioteca UI principal\n- **TypeScript 5.8.3** - Linguagem com tipagem estática\n- **Vite 6.3.5** - Build tool e dev server\n- **Tailwind CSS 4.1.7** - Framework CSS utility-first\n- **React Router DOM 7.6.0** - Roteamento client-side\n\n### Banco de Dados e Persistência:\n- **@electric-sql/pglite 0.3.1** - PostgreSQL que roda no browser\n- **Drizzle ORM 0.43.1** - ORM TypeScript-first\n- **@tanstack/db-collections 0.0.2** - Collections para dados locais\n\n### Gerenciamento de Estado:\n- **@tanstack/react-query 5.77.0** - Fetching e caching de dados\n- **React hooks nativos** - useState, useEffect, useRef\n\n### Utilitários:\n- **date-fns 4.1.0** - Manipulação de datas\n- **Zod 3.25.7** - Validação de schemas\n\n### Ferramentas de Desenvolvimento:\n- **Biome 1.9.4** - Linter e formatter\n- **ESLint 9.25.0** - Linting adicional\n- **Vitest** - Testes unitários\n- **pnpm 10.11.0** - Gerenciador de pacotes\n\n### Funcionalidades Identificadas:\n- **Arquitetura Offline-First** com PGlite\n- **Service Worker** para funcionalidade offline\n- **PWA** com instalação\n- **Sistema de sincronização** com WebSocket\n- **Cache multi-camadas**\n- **Monitoramento** (atualmente com dados simulados)\n- **Sistema de backup** incremental\n- **Lazy loading** otimizado\n\nAs métricas e logs que você viu são de fato simulados para fins de demonstração no dashboard de monitoramento."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":645,"cache_read_input_tokens":47353,"output_tokens":515,"service_tier":"standard"}},"costUSD":0.12179325,"durationMs":20860,"type":"assistant","uuid":"52c463b6-272c-41cb-afc4-4d05dc7352b7","timestamp":"2025-05-26T06:49:10.041Z"}
{"parentUuid":"52c463b6-272c-41cb-afc4-4d05dc7352b7","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":"essa parte aqui é mock'/var/folders/7h/09tgllmj1vz1s45_6p7dy06w0000gn/T/TemporaryItems/NSIRD_screencaptureui_RcGkIu/Captura de Tela 2025-05-26 às 03.50.37.png' ou existe um erro?"},"uuid":"6454f78d-c0ae-42df-859d-2c18c760a6ad","timestamp":"2025-05-26T06:50:47.127Z"}
{"parentUuid":"6454f78d-c0ae-42df-859d-2c18c760a6ad","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01Bp8YQpxwXRAnhi5nCPr9py","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou verificar a imagem que você enviou."},{"type":"tool_use","id":"toolu_01GVYxTQJNZuHiNJJig58UGd","name":"Read","input":{"file_path":"/var/folders/7h/09tgllmj1vz1s45_6p7dy06w0000gn/T/TemporaryItems/NSIRD_screencaptureui_RcGkIu/Captura de Tela 2025-05-26 às 03.50.37.png"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":614,"cache_read_input_tokens":47998,"output_tokens":147,"service_tier":"standard"}},"costUSD":0.09453450000000001,"durationMs":5692,"type":"assistant","uuid":"b5d5a05e-7ce7-4e74-8af7-6d052292131a","timestamp":"2025-05-26T06:50:52.867Z"}
{"parentUuid":"b5d5a05e-7ce7-4e74-8af7-6d052292131a","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_01GVYxTQJNZuHiNJJig58UGd","type":"tool_result","content":[{"type":"image","source":{"type":"base64","data":"","media_type":"image/png"}}]}]},"uuid":"62f44c92-97cb-4c25-9834-194684e05e07","timestamp":"2025-05-26T06:51:00.262Z","toolUseResult":{"type":"image","file":{"base64":"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Y29tL2V4aWYvMS4wLyI+CiAgICAgICAgIDxleGlmOlBpeGVsWURpbWVuc2lvbj40NDY8L2V4aWY6UGl4ZWxZRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24+ODk4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICAgICAgICAgPGV4aWY6VXNlckNvbW1lbnQ+U2NyZWVuc2hvdDwvZXhpZjpVc2VyQ29tbWVudD4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CrvGnEQAAAAcaURPVAAAAAIAAAAAAAAA3wAAACgAAADfAAAA3wAAc/6TGCDvAABAAElEQVR4AeydCdxVwxvHx7+yL6UsJRJSZN/3fQtJUgpZsicJZVeJ0GZJC0WkUooUoYTsQnZSaZOUJdn35f0/v3mb03PPnXPvufe9933f7v1Nn957zpw5c+Z855x75zfzzDOrlUgwDCRAAiRAAiRAAiRAAiRAAiRAAkVDYDUKwaKpa94oCZAACZAACZAACZAACZAACVgCFIJ8EEiABEiABEiABEiABEiABEigyAhQCBZZhfN2SYAESIAESIAESIAESIAESIBCkM8ACZAACZAACZAACZAACZAACRQZAQrBIqtw3i4JkAAJkAAJkAAJkAAJkAAJUAjyGSABEiABEiABEiABEiABEiCBIiNAIVhkFc7bJQESIAESIAESIAESIAESIAEKQT4DJEACJEACJEACJEACJEACJFBkBCgEi6zCebskQAIkQAIkQAIkQAIkQAIkQCHIZ4AESIAESIAESIAESIAESIAEiowAhWCRVThvlwRIgARIgARIgARIgARIgAQoBPkMkAAJkAAJkAAJkAAJkAAJkECREaAQLLIK5+2SAAmQAAmQAAmQAAmQAAmQAIUgnwESIAESIAESIAESIAESIAESKDICFIJFVuG8XRIgARIgARIgARIgARIgARKgEOQzQAIkQAIkQAIkQAIkQAIkQAJFRoBCsMgqnLdLAiRAAiRAAiRAAiRAAiRAAhSCfAZIgARIgARIgARIgARIgARIoMgIUAgWWYXzdkmABEiABEiABEiABEiABEiAQpDPAAmQAAmQAAmQAAmQAAmQAAkUGQEKwSKrcN4uCZAACZAACZAACZAACZAACVAI8hkgARIgARIgARIgARIgARIggSIjQCFYZBXO2yUBEiABEiABEiABEiABEiABCkE+AyRAAiRAAiRAAiRAAiRAAiRQZAQoBIuswnm7JEACJEACJEACJEACJEACJEAhyGeABEiABEiABEiABEiABEiABIqMAIVgkVU4b5cESIAESIAESIAESIAESIAEKAT5DJAACZAACZAACZAACZAACZBAkRGgECyyCuftkgAJkAAJkAAJkAAJkAAJkACFIJ8BEiABEiABEiABEiABEiABEigyAhSCRVbhvF0SIAESIAESIAESIAESIAESoBDkM0ACJEACJEACJEACJEACJEACRUaAQrDIKpy3SwIkQAIkQAIkQAIkQAIkQAIUgnwGSIAESIAESIAESIAESIAESKDICFAIFlmF83ZJgARIgARIgARIgARIgARIgEKQzwAJkAAJkAAJkAAJkAAJkAAJFBkBCsEiq3DeLgmQAAmQAAmQAAmQAAmQAAlQCPIZIAESIAESIAESIAESIAESIIEiI0AhWGQVztslARIgARIgARIgARIgARIgAQpBPgMkQAIkQAIkQAIkQAIkQAIkUGQEKASLrMJ5uyRAAiRAAiRAAiRAAiRAAiRAIchngARIgARIgARIgARIgARIgASKjACFYJFVOG+XBEiABEiABEiABEiABEiABCgE+QyQAAmQAAmQAAmQAAmQAAmQQJERoBAssgrn7ZIACZAACZAACZAACZAACZAAhSCfARIgARIgARIgARIgARIgARIoMgIUgkVW4bxdEiABEiABEiABEiABEiABEqAQ5DNAAiRAAiRAAiRAAiRAAiRAAkVGgEKwyCqct0sCJEACJEACJEACJEACJEACFIJ8BkiABEiABEiABEiABEiABEigyAhQCBZZhfN2SYAESIAESIAESIAESIAESKBSC8FLLrnE/P777wm1dPzxx5sTTzwxIY47+SXgq4dUV9xggw1M7dq1zWabbWYOPfRQs+mmm6ZKzmMkQAIkQAIkQAIkQAIkQALlTKBSC8HVVlstCceVV15pevXqlRTPiPwR8NVDJlc77LDDzPXXX29FYSbnMS0JkAAJkAAJkAAJkAAJkEB+CFAI5odrQeVaViHoYGBksW/fvmb11Vd3UfwsZwKvv/66ad68edJVZ8yYYTbffPOkeEaQAAmQAAmQAAmQAAkUJgEKwcKs15zeVa6EIArVvn17M3DgwJyWj5nFJ/Dss8+ao48+OumEWbNmmYYNGybFM4IESIAESIAESIAESKAwCVAIFma95vSuooTgeuutl3Sdn3/+OSkuHDFmzBhzyimnhKO5Xw4EKATLATIvQQIkQAIkQAIkQAKrAAEKwVWgkiq6iD4hGDVX89dffzXz5s0z99xzjxk8eLC36Lvttpt55513vMcYmV8CFIL55cvcSYAESIAESIAESGBVIUAhGKqp3377zfz555+mevXqxieAQslj7/7999+mWrVqsdNnkrCkpMT89NNP5r///jPw2Pm///0vk9PTpvVxiBKCOrNJkyaZpk2b6qhg+/333zc777xzsJ9u48cffzRVq1Y166yzTrqkGR3/66+/DEYxwQ355yrkq7yufKjrH374way//voZlTsfQhDPNp4/vDNVqlRxRSzT57///mvAEPNJ11133TLlxZNJgARIgARIgARIgASSCRS9EMTo1fDhw83kyZMN5klp08Ztt93WipUzzzzTzqvKRCh8//335r777jNPPvmkmT17tvnmm28MTCl33313s+eee5pOnTqZOnXq2Brp0aOHmTt3bkLtNGvWzLRo0SIhTu+88MIL5vHHHzdPP/20mT9/vj5kNt54Y3PssccaLLWBfDIpd0JGK3ayFYI4/dxzzzX3339/UrajR482rVu3Top3ETNnzjT33nuvefHFF82HH37ooi3DBg0aWIHZrl07s8UWWwTH4mx89dVXZuTIkWbChAnms88+s/XizgM31E/Lli3tEiU1atRwh9J+5qK8EPTnnXeegTjVoUOHDmavvfayZR06dKh56KGHzJw5c4IkO+20k9l1113NhRdeaPbZZ58g3m089dRT5pFHHrG7uOfp06e7Q8En5g3i/l1o06aNadKkidtN+MSSLo899pgtx6effmoWL14cHN9qq63MjjvuaM455xx7ftxnD2Jy7Nix5oknnrB1jvdFB7yLeJ5POukks//+++tD3CYBEiABEiABEiABEsiGgDQ+K22Q+ykJ/5eRqJyUd/ny5SXS4E/KP3w9ty+N5JKpU6fGuvaQIUNi5TtgwACbnzTkk9JfddVV3muJ6WXJ+eefn5TelTP8uf3225e89tpr3rziRobzxH7cepg4caK3rL179/ZeftmyZSUyiug9x1cOET8lIky8eenI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p06OSsBsSIAESIAESIAESIAESIAESCCaAIVgNJucHZHF3O3yDhgtRMBSBbVq1TL16tWzSyHk7ELMiARIgARIgARIgARIgARIgARiEKAQjAGJSUiABEiABEiABEiABEiABEigkAhQCBZSbfJeSIAESIAESIAESIAESIAESCAGAQrBGJCYhARIgARIgARIgARIgARIgAQKiQCFYCHVJu+FBEiABEiABEiABEiABEiABGIQoBCMAYlJSIAESIAESIAESIAESIAESKCQCFAIFlJt8l5IgARIgARIgARIgARIgARIIAYBCsEYkJiEBEiABEiABEiABEiABEiABAqJAIVgIdUm74UESIAESIAESIAESIAESIAEYhCgEIwBiUlIgARIgARIgARIgARIgARIoJAIUAgWUm3yXkiABEiABEiABEiABEiABEggBgEKwRiQmIQESIAESIAESIAESIAESIAECokAhWAh1SbvhQRIgARIgARIgARIgARIgARiEKAQjAGJSUiABEiABEiABEiABEiABEigkAhQCBZSbfJeSIAESIAESIAESIAESIAESCAGAQrBGJCYhARIgARIgARIgARIgARIgAQKiQCFYCHVJu+FBEiABEiABEiABEiABEiABGIQoBCMAYlJSIAESIAESIAESIAESIAESKCQCFAIFlJt8l5IgARIgARIgARIgARIgARIIAYBCsEYkJiEBEiABEiABEiABEiABEiABAqJAIVgIdUm74UESIAESIAESIAESIAESIAEYhCgEIwBiUlIgARIgARIgARIgARIgARIoJAIUAgWUm3yXkiABEiABEiABEiABEiABEggBgEKwRiQmIQESIAESIAESIAESIAESIAECokAhWAh1SbvhQRIgARIgARIgARIgARIgARiEKAQjAGJSUiABEiABEiABEiABEiABEigkAhQCBZSbfJeSIAESIAESIAESIAESIAESCAGAQrBGJCYhARIgARIgARIgARIgARIgAQKiQCFYCHVJu+FBEiABEiABEiABEiABEiABGIQoBCMAYlJSIAESIAESIAESIAESIAESKCQCFAIFlJt8l5IgARIgARIgARIgARIgARIIAYBCsEYkJiEBEiABEiABEiABEiABEiABAqJAIVgIdUm74UESIAESIAESIAESIAESIAEYhCgEIwBiUlIgARIgARIgARIgARIgARIoJAIUAgWUm3yXkiABEiABEiABEiABEiABEggBgEKwRiQmIQESIAESIAESIAESIAESIAECokAhWAh1SbvhQRIgARIgARIgARIgARIgARiEKAQjAGJSUiABEiABEiABEiABEiABEigkAhQCBZSbfJeSIAESIAESIAESIAESIAESCAGAQrBGJCYhARIgARIgARIgARIgARIgAQKiQCFYCHVJu+FBEiABEiABEiABEiABEiABGIQoBCMAYlJSIAESIAESIAESIAESIAESKCQCFAIFlJt8l5IgARIgARIgARIgARIgARIIAYBCsEYkJiEBEiABEiABEiABEiABEiABAqJwColBB+d+IwZPmp8Ev/999ndXH35hUnxjCCBVASmvTLd3H73/UlJtt2mvul3y7VJ8YwgARIgARIgARIgARIggUIhsEoJwdHjnjQPj3siif3uu+xgul97aVJ8IUf8/vsf5q+//zYbrL9e1rf58y+/mmpVq5o111wj6zxydWJJSYlZbbXVcpVdrHyefeFVc/c9w5PS1ttiMzOgb/ekeEZkRgB1+tPPv5TpGc3sivlL/ceff5o///zLrL/euuX+nObvrphzRRCY+NRU8/Y7H3ovfeE5p5m6m23qPVaskZMmv2BmzZlnb/+8s1oXxPdJsdZlZbnvRV8sMe9/NNMs/vIr89vvvwfFOvv0lqbmhtWD/Vxt5OKdv33A/Wb58h+SilSlahVz47WdkuIZQQJxCayyQvCwg/Y1e+6+k73PTTauZRpsvWXae17w+RfmsYmTzU8//WLT7rHbjuaEY49Ie54vwS+//mZuvPUu888//9rDOzZuaNq1belLWua4P/7407woo1cffTLbzJw11yxb/n2QZ5X//c9sKF9cB+2/p2ndomlKUTd/4RdmyvMv20YIvlD+/e8/m0+1alVN3TqbmlYnHWcO2HePIO98b2BE7o033zUfz5xjIEprbVjD7LD9tuawg/c1u+7cOPbls63X74TBp7Pn2uv8ItcfOHSk3S5PIdjtljuD5zHdDTfaditzQbtTbbLHn3zWvPfBJ8Epe+6+s2na5LBgP7xxx4Bh5vsffrTRrVocZ3bYbtuEJPcNf8R88ulnCXGpdjAKf/KJTZKS/PPPP2b0o5PM+x/ONPPmf26fMTxfDRtsZfbZcxfT7Lgjk86prBFvv/uhQefTF18u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","type":"image/png","originalSize":66893}}}
{"parentUuid":"62f44c92-97cb-4c25-9834-194684e05e07","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_016L3GKg5S3WgzjspUVT1HPH","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Sim, esses logs são mockados/hardcoded. Vou mostrar exatamente onde estão no código:"},{"type":"tool_use","id":"toolu_013bUUqWSEM1L9ozdGyFKYxA","name":"Grep","input":{"pattern":"14:32:01.*Sync completed successfully","path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src"}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":4,"cache_creation_input_tokens":697,"cache_read_input_tokens":48612,"output_tokens":126,"service_tier":"standard"}},"costUSD":0.09549675000000002,"durationMs":8213,"type":"assistant","uuid":"58e61532-fedf-4579-94a7-eeee2a639c5c","timestamp":"2025-05-26T06:51:08.489Z"}
{"parentUuid":"58e61532-fedf-4579-94a7-eeee2a639c5c","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_013bUUqWSEM1L9ozdGyFKYxA","type":"tool_result","content":"Found 1 file\n/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx"}]},"uuid":"16f769e6-d1e5-4567-8051-b90b0e2dab81","timestamp":"2025-05-26T06:51:08.530Z","toolUseResult":{"filenames":["/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx"],"numFiles":1}}
{"parentUuid":"16f769e6-d1e5-4567-8051-b90b0e2dab81","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_013hoVxw9MhD6SiEhK11nDEL","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"tool_use","id":"toolu_015Vw7hK5285cJ3fjcrn7DfY","name":"Read","input":{"file_path":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx","offset":330,"limit":10}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":3,"cache_creation_input_tokens":169,"cache_read_input_tokens":49309,"output_tokens":110,"service_tier":"standard"}},"costUSD":0.08542725,"durationMs":3915,"type":"assistant","uuid":"5c13e937-d289-4ea0-9a69-1d4b3d9c0c6e","timestamp":"2025-05-26T06:51:12.456Z"}
{"parentUuid":"5c13e937-d289-4ea0-9a69-1d4b3d9c0c6e","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_015Vw7hK5285cJ3fjcrn7DfY","type":"tool_result","content":"   330\t        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n   331\t          <h2 className=\"text-xl font-semibold mb-4\">Logs Recentes</h2>\n   332\t          <div className=\"space-y-2 font-mono text-sm\">\n   333\t            <div className=\"text-gray-600\">[14:32:01] INFO: Sync completed successfully</div>\n   334\t            <div className=\"text-green-600\">[14:31:45] SUCCESS: Backup created</div>\n   335\t            <div className=\"text-yellow-600\">[14:30:22] WARN: High memory usage detected</div>\n   336\t            <div className=\"text-gray-600\">[14:29:15] INFO: Cache cleared</div>\n   337\t            <div className=\"text-red-600\">[14:28:03] ERROR: Connection timeout</div>\n   338\t          </div>\n   339\t        </div>"}]},"uuid":"84224478-5fcb-4bae-8f28-fe18180ab1b4","timestamp":"2025-05-26T06:51:12.464Z","toolUseResult":{"type":"text","file":{"filePath":"/Users/agents/.claude/todos/app_todos_bd_tasks/frontend/src/app.tsx","content":"        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">Logs Recentes</h2>\n          <div className=\"space-y-2 font-mono text-sm\">\n            <div className=\"text-gray-600\">[14:32:01] INFO: Sync completed successfully</div>\n            <div className=\"text-green-600\">[14:31:45] SUCCESS: Backup created</div>\n            <div className=\"text-yellow-600\">[14:30:22] WARN: High memory usage detected</div>\n            <div className=\"text-gray-600\">[14:29:15] INFO: Cache cleared</div>\n            <div className=\"text-red-600\">[14:28:03] ERROR: Connection timeout</div>\n          </div>\n        </div>","numLines":10,"startLine":330,"totalLines":637}}}
{"parentUuid":"84224478-5fcb-4bae-8f28-fe18180ab1b4","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_014u9Y82Q3PL2sgVYvof7nYg","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Confirmado! Esses logs estão hardcoded no arquivo `app.tsx` (linhas 333-337). São apenas textos estáticos para demonstração visual, não são logs reais do sistema. \n\nPara implementar logs reais, seria necessário:\n1. Um sistema de logging que capture eventos reais\n2. Armazenamento dos logs (localStorage, IndexedDB ou PGlite)\n3. Componente que leia e exiba os logs dinamicamente\n4. Sistema de rotação/limpeza de logs antigos\n\nAtualmente é apenas uma demonstração visual mockada."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":364,"cache_read_input_tokens":49478,"output_tokens":142,"service_tier":"standard"}},"costUSD":0.091722,"durationMs":8965,"type":"assistant","uuid":"6da241d5-6124-4d48-8704-bc7920dba243","timestamp":"2025-05-26T06:51:21.453Z"}
{"parentUuid":"6da241d5-6124-4d48-8704-bc7920dba243","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":"me explica melhor que logs seriam esses?"},"uuid":"38695c0e-143f-4811-bb93-465cf324f92e","timestamp":"2025-05-26T06:52:37.965Z"}
{"parentUuid":"38695c0e-143f-4811-bb93-465cf324f92e","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_013eym47xC7fdFrvaqqiKREn","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"Vou explicar melhor o que seriam esses logs em um sistema real:"},{"type":"tool_use","id":"toolu_011saADctMEBJDn9z4jC6Bb1","name":"TodoWrite","input":{"todos":[{"id":"investigate-frontend-1","content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high"},{"id":"investigate-frontend-2","content":"Analisar arquivos principais e configuração do projeto frontend","status":"completed","priority":"high"},{"id":"investigate-frontend-3","content":"Identificar tecnologias e frameworks utilizados","status":"completed","priority":"medium"},{"id":"investigate-frontend-4","content":"Mapear componentes e estrutura de páginas","status":"in_progress","priority":"medium"},{"id":"investigate-frontend-5","content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low"}]}}],"stop_reason":"tool_use","stop_sequence":null,"usage":{"input_tokens":0,"cache_creation_input_tokens":1608,"cache_read_input_tokens":49842,"output_tokens":290,"service_tier":"standard"}},"costUSD":0.126663,"durationMs":11768,"type":"assistant","uuid":"a955a4ea-831d-4e31-a45d-dad51f636444","timestamp":"2025-05-26T06:52:49.786Z"}
{"parentUuid":"a955a4ea-831d-4e31-a45d-dad51f636444","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","type":"user","message":{"role":"user","content":[{"tool_use_id":"toolu_011saADctMEBJDn9z4jC6Bb1","type":"tool_result","content":"Todos have been modified successfully. Ensure that you continue to use the todo list to track your progress. Please proceed with the current tasks if applicable"}]},"uuid":"5074480f-3dc6-4152-8a6d-44143b06253e","timestamp":"2025-05-26T06:52:49.811Z","toolUseResult":{"oldTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"completed","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"in_progress","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"pending","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}],"newTodos":[{"content":"Investigar estrutura do diretório frontend em /Users/agents/.claude/todos/app_todos_bd_tasks/frontend","status":"completed","priority":"high","id":"investigate-frontend-1"},{"content":"Analisar arquivos principais e configuração do projeto frontend","status":"completed","priority":"high","id":"investigate-frontend-2"},{"content":"Identificar tecnologias e frameworks utilizados","status":"completed","priority":"medium","id":"investigate-frontend-3"},{"content":"Mapear componentes e estrutura de páginas","status":"in_progress","priority":"medium","id":"investigate-frontend-4"},{"content":"Documentar descobertas e possíveis melhorias","status":"pending","priority":"low","id":"investigate-frontend-5"}]}}
{"parentUuid":"5074480f-3dc6-4152-8a6d-44143b06253e","isSidechain":false,"userType":"external","cwd":"/Users/agents/.claude","sessionId":"2c88f529-56fd-454f-8800-2abfd769ebb0","version":"1.0.3","message":{"id":"msg_01A9yBKoQUJuGhTDSjJphdQU","type":"message","role":"assistant","model":"claude-opus-4-20250514","content":[{"type":"text","text":"## Explicação dos Logs Mockados\n\nEsses logs representariam eventos reais do sistema em produção:\n\n### 1. **\"Sync completed successfully\"** (Sincronização concluída)\n- **O que seria**: Quando o PGlite local sincroniza dados com o servidor\n- **Dados reais**: Número de registros sincronizados, tempo decorrido, direção (upload/download)\n- **Exemplo real**: `[2025-05-26 14:32:01] INFO: Sync completed - 47 records uploaded, 12 downloaded in 245ms`\n\n### 2. **\"Backup created\"** (Backup criado)\n- **O que seria**: Sistema de backup incremental salvando snapshot do banco\n- **Dados reais**: Tamanho do backup, localização, tipo (completo/incremental)\n- **Exemplo real**: `[2025-05-26 14:31:45] SUCCESS: Incremental backup created - 2.3MB saved to IndexedDB`\n\n### 3. **\"High memory usage detected\"** (Uso alto de memória)\n- **O que seria**: Monitor detectando consumo excessivo de RAM\n- **Dados reais**: Percentual usado, limite, processo causador\n- **Exemplo real**: `[2025-05-26 14:30:22] WARN: Memory usage at 85% (680MB/800MB) - Consider clearing cache`\n\n### 4. **\"Cache cleared\"** (Cache limpo)\n- **O que seria**: Limpeza automática ou manual do cache multi-camadas\n- **Dados reais**: Quantidade liberada, camadas afetadas\n- **Exemplo real**: `[2025-05-26 14:29:15] INFO: Cache cleared - 45MB freed from memory, 120MB from IndexedDB`\n\n### 5. **\"Connection timeout\"** (Timeout de conexão)\n- **O que seria**: WebSocket perdendo conexão com servidor\n- **Dados reais**: Endpoint, tempo de tentativa, código de erro\n- **Exemplo real**: `[2025-05-26 14:28:03] ERROR: WebSocket timeout after 30s - wss://api.example.com/sync - Retrying...`\n\n## Como Implementar Logs Reais\n\n```typescript\n// Sistema de logging real\nclass Logger {\n  private logs: LogEntry[] = [];\n  \n  log(level: 'INFO' | 'SUCCESS' | 'WARN' | 'ERROR', message: string, details?: any) {\n    const entry = {\n      timestamp: new Date(),\n      level,\n      message,\n      details\n    };\n    \n    // Salvar no PGlite\n    this.saveToDB(entry);\n    \n    // Emitir evento para UI\n    this.emit('log', entry);\n  }\n}\n\n// Uso real no sync\nasync syncData() {\n  logger.log('INFO', 'Starting sync...', { direction: 'bidirectional' });\n  \n  try {\n    const result = await syncEngine.sync();\n    logger.log('SUCCESS', `Sync completed - ${result.uploaded} up, ${result.downloaded} down`, result);\n  } catch (error) {\n    logger.log('ERROR', 'Sync failed', { error: error.message, stack: error.stack });\n  }\n}\n```\n\nEsses logs seriam essenciais para debugging, auditoria e monitoramento da saúde do sistema em produção."}],"stop_reason":"end_turn","stop_sequence":null,"usage":{"input_tokens":2,"cache_creation_input_tokens":608,"cache_read_input_tokens":51450,"output_tokens":848,"service_tier":"standard"}},"costUSD":0.152205,"durationMs":32060,"type":"assistant","uuid":"4dcb2031-550f-4f6c-8113-70b8b3c2721a","timestamp":"2025-05-26T06:53:21.908Z"}

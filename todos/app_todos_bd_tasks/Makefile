# Makefile para desenvolvimento do projeto Node Local DB
# Uso: make [comando]

.PHONY: help start stop restart clean clean-start status logs install db-reset test lint format check

# Comando padr√£o
.DEFAULT_GOAL := help

# Cores para output
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
RED := \033[0;31m
NC := \033[0m # No Color

# Diret√≥rios
BACKEND_DIR := backend
FRONTEND_DIR := frontend

## help: Mostra esta mensagem de ajuda
help:
	@echo "$(BLUE)=== Node Local DB - Comandos Make ===$(NC)"
	@echo ""
	@echo "Uso: make [comando]"
	@echo ""
	@grep -E '^##' Makefile | sed 's/## //'
	@echo ""

## start: Inicia backend e frontend
start:
	@./dev.sh start

## stop: Para todos os servi√ßos
stop:
	@./dev.sh stop

## restart: Reinicia todos os servi√ßos
restart:
	@./dev.sh restart

## clean: Limpa caches e arquivos tempor√°rios
clean:
	@./dev.sh clean

## clean-start: Limpa caches e reinicia os servi√ßos
clean-start:
	@./dev.sh clean-start

## status: Verifica status dos servi√ßos
status:
	@./dev.sh status

## logs: Mostra logs dos servi√ßos
logs:
	@./dev.sh logs

## install: Instala todas as depend√™ncias
install:
	@./dev.sh install

## db-reset: Reseta banco de dados (migrate + seed)
db-reset:
	@./dev.sh db-reset

## test: Executa testes do backend
test:
	@echo "$(YELLOW)üß™ Executando testes...$(NC)"
	@cd $(BACKEND_DIR) && pnpm test

## test-ui: Executa testes com interface visual
test-ui:
	@echo "$(YELLOW)üß™ Abrindo interface de testes...$(NC)"
	@cd $(BACKEND_DIR) && pnpm test:ui

## test-coverage: Executa testes com cobertura
test-coverage:
	@echo "$(YELLOW)üìä Gerando relat√≥rio de cobertura...$(NC)"
	@cd $(BACKEND_DIR) && pnpm test:coverage

## lint: Verifica c√≥digo com linter
lint:
	@echo "$(YELLOW)üîç Verificando c√≥digo...$(NC)"
	@echo "$(BLUE)Backend:$(NC)"
	@cd $(BACKEND_DIR) && pnpm lint
	@echo "$(BLUE)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && pnpm lint

## lint-fix: Corrige problemas de lint automaticamente
lint-fix:
	@echo "$(YELLOW)üîß Corrigindo c√≥digo...$(NC)"
	@echo "$(BLUE)Backend:$(NC)"
	@cd $(BACKEND_DIR) && pnpm lint:fix
	@echo "$(BLUE)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && pnpm lint --fix

## format: Formata c√≥digo com prettier
format:
	@echo "$(YELLOW)‚ú® Formatando c√≥digo...$(NC)"
	@cd $(BACKEND_DIR) && pnpm format

## format-check: Verifica formata√ß√£o do c√≥digo
format-check:
	@echo "$(YELLOW)üîç Verificando formata√ß√£o...$(NC)"
	@cd $(BACKEND_DIR) && pnpm format:check

## build: Compila o projeto para produ√ß√£o
build:
	@echo "$(YELLOW)üèóÔ∏è  Compilando projeto...$(NC)"
	@echo "$(BLUE)Backend:$(NC)"
	@cd $(BACKEND_DIR) && pnpm build
	@echo "$(BLUE)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && pnpm build

## typecheck: Verifica tipos TypeScript
typecheck:
	@echo "$(YELLOW)üîç Verificando tipos...$(NC)"
	@cd $(BACKEND_DIR) && pnpm typecheck

## db-generate: Gera migrations do schema
db-generate:
	@echo "$(YELLOW)üóÑÔ∏è  Gerando migrations...$(NC)"
	@cd $(BACKEND_DIR) && pnpm db:generate

## db-migrate: Aplica migrations
db-migrate:
	@echo "$(YELLOW)üóÑÔ∏è  Aplicando migrations...$(NC)"
	@cd $(BACKEND_DIR) && pnpm db:migrate

## db-seed: Popula banco com dados de exemplo
db-seed:
	@echo "$(YELLOW)üå± Populando banco de dados...$(NC)"
	@cd $(BACKEND_DIR) && pnpm db:seed

## api-docs: Abre documenta√ß√£o da API
api-docs:
	@echo "$(BLUE)üìö Abrindo documenta√ß√£o da API...$(NC)"
	@open http://localhost:3333/docs || xdg-open http://localhost:3333/docs

## dev: Atalho para desenvolvimento (clean-start + logs em nova janela)
dev:
	@make clean-start
	@echo ""
	@echo "$(GREEN)‚úÖ Projeto iniciado!$(NC)"
	@echo ""
	@echo "$(BLUE)URLs:$(NC)"
	@echo "  Frontend: http://localhost:5173"
	@echo "  Backend:  http://localhost:3333"
	@echo "  API Docs: http://localhost:3333/docs"
	@echo ""
	@echo "$(YELLOW)üí° Para ver logs em tempo real:$(NC)"
	@echo "  make logs"

## check: Executa todas as verifica√ß√µes (lint, format, typecheck, test)
check:
	@echo "$(YELLOW)üîç Executando todas as verifica√ß√µes...$(NC)"
	@make lint
	@make format-check
	@make typecheck
	@make test
	@echo "$(GREEN)‚úÖ Todas as verifica√ß√µes passaram!$(NC)"

## update: Atualiza depend√™ncias
update:
	@echo "$(YELLOW)üì¶ Atualizando depend√™ncias...$(NC)"
	@echo "$(BLUE)Backend:$(NC)"
	@cd $(BACKEND_DIR) && pnpm update
	@echo "$(BLUE)Frontend:$(NC)"
	@cd $(FRONTEND_DIR) && pnpm update

## docker-up: Inicia containers Docker (futuro)
docker-up:
	@echo "$(RED)‚ùå Docker ainda n√£o configurado$(NC)"
	@echo "   Esta funcionalidade ser√° implementada em breve"

## docker-down: Para containers Docker (futuro)
docker-down:
	@echo "$(RED)‚ùå Docker ainda n√£o configurado$(NC)"
	@echo "   Esta funcionalidade ser√° implementada em breve"